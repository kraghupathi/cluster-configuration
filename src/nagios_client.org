#+TITLE:     Nagios Client - Design Model and Implementation
#+DATE:      2015-04-01 Wednesday
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
//#+SETUPFILE: org-templates/level-0.org
#+DESCRIPTION: Nagios Client Design Model Documentation
#+OPTIONS: ^:nil

* Introduction
- This document describes the design and implementation of how to configure a
  system to be monitored by a monitoring system. Nagios system is used to
  monitor services of a system such as ssh service, cpu usage, ram usage and
  disk usage.

* Requirements
** Functional Requirements
1) Monitor various services such as ssh, ping, http on all the system.
2) Accept incoming and outgoing ping requests to anywhere and from anywhere.
3) Accept incoming connections on TCP port 22 from ansible and management ips.
4) Accept incoming connections on TCP port 80.
5) Accept incoming connections on UDP port 161 and 162 for cacti.
6) Accept outgoing connections on TCP port 25 for logwatch.
7) Accept outgoing connections on TCP port 22.
8) Accept outgoing connections on UDP port 514 for rsyslog.
9) Accept outgoing connections on UDP port 1514 for ossec.
10) Accept outgoing connections on TCP port 5666 for nrpe.
11) Accept outgoing connections on TCP port 80 and 443 for yum.
12) Ansible machine ssh public key is to be added to authorized keys.
13) Run apache service.
14) Run nagios service.

** Security Requirements
1) Accept incoming SSH connections only from Ansible and management ips.
2) Set rate limit to a proper value on all connections to avoid connections
   flooding.

* Design
- Given diagram describes the design of the monitoring server. Systems files are
  listed for a quick overview of whole systems.
** System Design Diagram
[[./diagrams/nagios-server-design-diagram.png]]

** Editable Link
[[https://docs.google.com/a/vlabs.ac.in/drawings/d/10tc9FolWsVoPfEXI1FbvJmZKg77SjkGbcix2yJMg81Q/edit][Design Diagram Link]]

** System Files
|------+----------+---------------------------------------------+-------------------------|
| S.no | Service  | File                                        | Description             |
|------+----------+---------------------------------------------+-------------------------|
|   1. | Iptables | /etc/sysconfig/iptables                     | Configuration File      |
|------+----------+---------------------------------------------+-------------------------|
|   2. | Nagios   | /etc/xinetd.conf                            | Main Configuration File |
|------+----------+---------------------------------------------+-------------------------|
|   3. | Nagios   | /etc/nagios/nrpe.cfg                        | Configuration File      |
|------+----------+---------------------------------------------+-------------------------|
  
** Configuration Design
- In a system there may be many services of interest which are to be monitored,
  such as =ssh=, =ping= and =http=. Services and usage being monitored may be
  different for various machines.

* Implementation
** Structure of Scripts
- The implementation of this system is in terms of a collection of Ansible
  scripts which configure the machine. These scripts are organized as follows:
#+BEGIN_EXAMPLE
|-- nagios_client.yaml
|-- roles
|   |   |-- nagios_client
|   |   |   |-- handlers
|   |   |   |   `-- main.yaml
|   |   |   |-- tasks
|   |   |   |   `-- main.yaml
|   |   |   |-- templates
|   |   |   |   `-- xinetd.conf.j2
|   |   |   `-- vars
|   |   |       `-- main.yaml
#+END_EXAMPLE

** Firewall rules for Nagios Client
- Firewall rules applied to nagios client system are mentioned here. Description
  of firewall rules which are common across all the systems are defined in the
  common role. Rules [[Rule for incoming NRPE query from Nagios server][1]] and [[Rule for incoming SSH connections from Nagios server][2]] are specific to only nagios client and are described
  here.

*** Rule for incoming NRPE query from Nagios server
- Nagios monitors systems disk usage, ram usage by sending a NRPE query.
#+BEGIN_EXAMPLE
#Allow to accept incoming nrpe queries from nagios server
-A INPUT -m state --state NEW -p tcp -m tcp --dport 5666 -j ACCEPT
#+END_EXAMPLE

*** Rule for incoming SSH connections from Nagios server
- Nagios monitors ssh service on the client machine.
#+BEGIN_EXAMPLE
#Allow incoming SSH connections from nagios server IPs.  Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in nagios_server_ips  %}  
-A INPUT -m state --state NEW -s {{item}} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#+END_EXAMPLE

** Update all packages
- All packages inside the machine are updated before configuring the nagios
  client machine.
#+BEGIN_SRC yml :tangle roles/nagios_client/tasks/main.yml :eval no
- name: running yum update
  yum: name=* state=latest
  environment: proxy_env
#+END_SRC
   
** Install Nagios packages
- Following nagios packages are installed in the system:
1) =nagios=
2) =nagios-pulgins-all=
3) =nagios-plugins-nrpe=
4) =nrpe=
5) =xinetd=

#+BEGIN_SRC yml :tangle roles/nagios_client/tasks/main.yml :eval no
- name: Installing nagios
  yum: name=nagios state=installed
  environment: proxy_env

- name: Installing all nagios plugins 
  yum: name=nagios-plugins-all state=installed
  environment: proxy_env

- name: Installing nrpe nagios plugins
  yum: name=nagios-plugins-nrpe state=installed
  environment: proxy_env

- name: Installing nrpe
  yum: name=nrpe state=installed
  environment: proxy_env
#+END_SRC 
** Start xinetd service
- Any changes in xinetd configuration is enforced by restarting the xinetd
  service.
#+BEGIN_SRC yml :tangle roles/nagios_client/handlers/main.yml
- name: restart xinetd
  sudo: true
  service: name=xinetd state=restarted
#+END_SRC

** Start nrpe service
- Any changes in nrpe configuration is enforced by restarting the nrpe service.
#+BEGIN_SRC yml :tangle roles/nagios_client/handlers/main.yml
- name: restart nrpe
  sudo: true
  service: name=nrpe state=restarted
#+END_SRC

** Define Variables and Services groups
- Various used by the ansible playbook are defined here.
#+BEGIN_SRC yml :tangle roles/nagios_client/vars/main.yml
nagios_server: 10.100.1.8
#+END_SRC
* Test Cases
** Test Case-1
*** Objective: 
- Test the nagios web dashboard.
*** Apparatus:
1) Nagios server
2) Nagios client

*** Theory
- Nagios server provides a web interface to monitor client machines. Web
  dashboard runs as an http server on port 80. 

*** Experiment
- Verify whether the web url of dashboard is opening in a browser.

*** Observation
- Web interface displays the services being monitored in the system.

*** Conclusion
- If the web interface is opening then its assure that server is configure
  properly.

** Test Case-2
*** Objective:
- Test alert mails are send in case of critical situation.

*** Apparatus:
1) Nagios server
2) Nagios client

*** Theory
- Nagios server sends alert messages whenever the client machine goes to
  a critical state.

*** Experiment
- Stop a service for example "ssh" inside the client machine manually using
  "service sshd stop" command. Now see in mail server if the email alerts are
  received.

*** Observation
- Nagios generates a mail alert in a critical situation.

*** Conclusion
- If the email alerts are being received then the mail service is configured
  properly.
  
** Test Case-3
*** Objective:
- Test command status by executing them on the client machine from the nagios
  server.

*** Apparatus:
1) Nagios server
2) Nagios client

*** Theory
- Services can also be monitored by running some commands on the client machine
  from the nagios server.

*** Experiment
- Execute following commands from the nagios server:
**** Check load 
#+BEGIN_EXAMPLE
/usr/lib64/nagios/plugins/check_nrpe -H <ipaddress of client> -c check_load
#+END_EXAMPLE


**** Check users 
#+BEGIN_EXAMPLE
/usr/lib64/nagios/plugins/check_nrpe -H <ipaddress of client> -c check_users
#+END_EXAMPLE

**** Check ssh service
#+BEGIN_EXAMPLE
/usr/lib64/nagios/plugins/check_ssh -p 22 <ipaddress of client>
#+END_EXAMPLE
*** Result
- Output of commands when executed on client machine: 10.4.15.117 are as
  follows:
**** Sample output for command 1.
#+BEGIN_EXAMPLE
OK - load average: 0.00, 0.00, 0.00|load1=0.000;15.000;30.000;0; load5=0.000;10.000;25.000;0; load15=0.000;5.000;20.000;0; 
#+END_EXAMPLE
**** Sample output for command 2.
#+BEGIN_EXAMPLE
USERS OK - 0 users currently logged in |users=0;5;10;0
#+END_EXAMPLE

**** Sample output for command 3.
#+BEGIN_EXAMPLE
SSH OK - OpenSSH_5.3 (protocol 2.0) | time=0.007418s;;;0.000000;10.000000
#+END_EXAMPLE
*** Observation
- Return status of the services is displayed in the command output.

*** Conclusion
- If the return status of the depicts the status of service in the client machine.


