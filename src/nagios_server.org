#+TITLE:     Nagios Server - Design Model and Implementation
#+DATE:      2015-04-01 Wednesday
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+DESCRIPTION: Nagios Server Design Model Documentation

* Introduction
- This document describes the design and implementation of Monitoring System.
  Nagios system is used to monitor services of our system such as ssh service,
  cpu usage, ram usage and disk usage.

* Requirements
** Functional Requirements
1) Monitor various services such as ssh, ping, http on all the system.
2) Accept incoming and outgoing ping requests to anywhere and from anywhere.
3) Accept incoming connections on TCP port 22 from ansible and management ips.
4) Accept incoming connections on TCP port 80.
5) Accept incoming connections on UDP port 161 and 162 for cacti.
6) Accept outgoing connections on TCP port 25 for logwatch.
7) Accept outgoing connections on TCP port 22.
8) Accept outgoing connections on UDP port 514 for rsyslog.
9) Accept outgoing connections on UDP port 1514 for ossec.
10) Accept outgoing connections on TCP port 5666 for nrpe.
11) Accept outgoing connections on TCP port 80 and 443 for yum.
12) Ansible machine ssh public key is to be added to authorized keys.
13) Run apache service.
14) Run nagios service.

** Security Requirements
1) Accept incoming SSH connections only from Ansible and management ips.
2) Rate limiting on all connections.

* Design
- Following diagram describes the design of the monitoring server.
** System Design Diagram
[[./diagrams/nagios-server-design-diagram.png]]

** Editable Link
[[https://docs.google.com/a/vlabs.ac.in/drawings/d/10tc9FolWsVoPfEXI1FbvJmZKg77SjkGbcix2yJMg81Q/edit][Design Diagram Link]]

** System Files
|------+----------+---------------------------------------------+--------------------|
| S.no | Service  | File                                        | Description        |
|------+----------+---------------------------------------------+--------------------|
|   1. | Iptables | /etc/sysconfig/iptables                     | Configuration File |
|------+----------+---------------------------------------------+--------------------|
|   2. | Nagios   | /etc/nagios/objects/contacts.cfg            | Configuration File |
|------+----------+---------------------------------------------+--------------------|
|   3. | Nagios   | /etc/nagios/objects/servers.cfg             | Configuration File |
|------+----------+---------------------------------------------+--------------------|
|   4. | Nagios   | /etc/nagios/objects/additional_commands.cfg | Configuration File |
|------+----------+---------------------------------------------+--------------------|
|   5. | Nagios   | /etc/nagios/nagios.cfg                      | Configuration File |
|------+----------+---------------------------------------------+--------------------|
  
* Implementation
** Structure of Scripts
- The implementation of this system is in terms of a collection of Ansible
  scripts which configures the machine. These scripts are organized as follows:
#+BEGIN_EXAMPLE
|-- nagios_server.yaml
|-- roles
|   |   |-- nagios_server
|   |   |   |-- defaults
|   |   |   |   `-- main.yaml
|   |   |   |-- handlers
|   |   |   |   `-- main.yaml
|   |   |   |-- tasks
|   |   |   |   |-- configure_servers.yaml
|   |   |   |   `-- main.yaml
|   |   |   |-- templates
|   |   |   |   |-- commands.cfg
|   |   |   |   |-- contacts.cfg.j2
|   |   |   |   |-- nagios_server_iptables
|   |   |   |   `-- servers.cfg
|   |   |   `-- vars
|   |   |       `-- main.yaml
#+END_EXAMPLE

** What are the firewall rules for Nagios Server
- Firewall rules applied to Nagios server are mentioned here. Description of
  firewall rules which are common across all the systems are defined in the
  common role. Rules [[Rule to allow incoming http connection][1]], [[Rule for FORWARD chain][2]], [[Rule to allow outgoing NRPE queries][3]] and [[Rule to allow outgoing SSH connections][4]] are specific to only nagios server and are
  described here.
*** Common Firewall Rules - Section 1
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/nagios_server_iptables :eval no
#If packet does not match any rule then the default action is applied to the packet
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

#Allow internal process to process communication over loopback interface
-A INPUT -i lo -d 127.0.0.0/8 -j ACCEPT

#Rate limit new connections to 20 new connections per 30 seconds
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --set
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --rcheck --seconds 30 --hitcount 20 -m limit --limit 2/min -j LOG --log-prefix "new_limit_"
-A INPUT ! -p udp -m state --state NEW -m recent --name ssh_limit --rcheck --seconds 30 --hitcount 20 -j DROP

#Allow to accept incoming ping requests from anywhere
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG 
-A INPUT -p icmp --icmp-type echo-request -j DROP

#Allow to continue already related and established connections
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

#Allowing incoming ssh connections from the management ips.
#Hopefully fail2ban will take care of bruteforce attacks from management IPs
{% for item in management_ips  %}  
-A INPUT -m state --state NEW -s {{ item }} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allowing incoming ssh connections from ansible server. 
#Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in ansible_server_ips  %}
-A INPUT -m state --state NEW -s {{ item }} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#+END_SRC

*** Rule to allow incoming http connection
- Nagios server hosts a web interface to display monitoring data. Admins need to
  access this web interface for monitoring purposes.
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/nagios_server_iptables :eval no
#Allow incoming requests on port 80
-A INPUT -m state --state NEW -p tcp -m tcp --dport 80 -j ACCEPT
#+END_SRC

*** Common Firewall Rules - Section 2
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/nagios_server_iptables :eval no
#Allow to accept incoming snmp queries from cacti server
-A INPUT -p udp -m udp --dport 161 -j ACCEPT
-A INPUT -p udp -m udp --dport 162 -j ACCEPT

#Log all other "blocked_input_" attempts with rate limiting
-A INPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_input_"

#Drop all the INPUT packets which does not match any of the rules
-A INPUT -j REJECT --reject-with icmp-host-prohibited
#+END_SRC

*** Rule for FORWARD chain
- Nagios Server is not responsible for any packet forwarding, hence forwarding
  rule should be set to reject policy.
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/nagios_server_iptables :eval no
#Do not allow any packet to be forwarded
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
#+END_SRC

*** Common Firewall Rules - Section 3
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/nagios_server_iptables :eval no
#Allow internal process to process communication over loopback interface
-A OUTPUT -s 127.0.0.0/8 -o lo -j ACCEPT

#Allow outgoing connections to ansible server on port22
{% for item in ansible_server_ips  %}
-A OUTPUT -d {{item}} -p tcp -m tcp --sport 22 -j ACCEPT
{% endfor %}

#Allow to continue already related and established connections
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

#Allow DNS queries
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT

#Allow server to send emails.  Required for sending logwatch emails
-A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT

#Allow https to contact yum
-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
#+END_SRC

*** Rule to allow outgoing NRPE queries
- Nagios server sends NRPE queries to systems being monitored.
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/nagios_server_iptables :eval no
#Allow server to send nrpe queries
-A OUTPUT -p tcp -m tcp --dport 5666 -j ACCEPT
#+END_SRC

*** Rule to allow outgoing SSH connections
- Nagios server sends SSH connection requests to systems being monitored to
  monitor SSH service.
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/nagios_server_iptables :eval no
#Allow server to send ssh requests
-A OUTPUT -p tcp -m tcp --dport 22 -j ACCEPT
#+END_SRC

*** Common Firewall Rules - Section 4
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/nagios_server_iptables :eval no
#Allow outgoing ping requests
-A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT

#Allow outgoing connections to rsyslog server
-A OUTPUT -p udp -m udp --dport 514 -j ACCEPT

#Allow outgoing connections to OSSEC server
-A OUTPUT -p udp -m udp --dport 1514 -j ACCEPT

#Allow outgoing nrpe queries to internal network on port 5666
-A OUTPUT -d {{local_subnet}} -m state --state NEW -p tcp -m tcp --sport 5666 -j ACCEPT

#Log all other "blocked_output_" attempts
-A OUTPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_output_"

#Reply with proper ICMP error message and reject the connection
-A OUTPUT -j REJECT --reject-with icmp-host-prohibited

COMMIT
#+END_SRC
** Configure commands
- Define commands.
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/commands.cfg
{% for command in nagios_commands %}
define command {
  command_name  {{command.name}}
  command_line  {{command.command}}
}
{% endfor %}
#+END_SRC
** Configure contacts
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/contacts.cfg.j2
###############################################################################
# CONTACTS.CFG - SAMPLE CONTACT/CONTACTGROUP DEFINITIONS
#
#
# NOTES: This config file provides you with some example contact and contact
#        group definitions that you can reference in host and service
#        definitions.
#       
#        You don't need to keep these definitions in a separate file from your
#        other object definitions.  This has been done just to make things
#        easier to understand.
#
###############################################################################



###############################################################################
###############################################################################
#
# CONTACTS
#
###############################################################################
###############################################################################

# Just one contact defined by default - the Nagios admin (that's you)
# This contact definition inherits a lot of default values from the 'generic-contact' 
# template which is defined elsewhere.

define contact{
        contact_name                    nagiosadmin             ; Short name of user
        use                             generic-contact         ; Inherit default values from generic-contact template (defined above)
        alias                           {{nagios_admin_name}}            ; Full name of user

        email                           {{nagios_admin_email}} ; <<***** CHANGE THIS TO YOUR EMAIL ADDRESS ******
        }


###############################################################################
###############################################################################
#
# CONTACT GROUPS
#
###############################################################################
###############################################################################

# We only have one contact in this simple configuration file, so there is
# no need to create more than one contact group.

define contactgroup{
        contactgroup_name       admins
        alias                   Nagios Administrators
        members                 nagiosadmin
        }

#+END_SRC
** Configure servers
#+BEGIN_SRC yml :tangle roles/nagios_server/templates/servers.cfg
{#  print filter(lambda x: x['server'] == item, hosts)[0] %}#}
{% for h in nagios_hosts %}
define host {
use             linux-server
alias           {{ h }}
host_name       {{ h }}
address         {{ nagios_hosts[h].hostname }}          
}


{% for s in nagios_host_groups[nagios_hosts[h].group] %}

define service {
use                     generic-service
host_name               {{ h }}
service_description     {{ s.service }}
check_command           {{ s.command }}
}
{% endfor %}
{% endfor %}
#+END_SRC
    
** Update all packages
#+BEGIN_SRC yml :tangle roles/nagios_server/tasks/main.yml :eval no
- name: running yum update
  yum: name=* state=latest
  environment: proxy_env
#+END_SRC
   
** Install Nagios packages
- Nagios packages are installed in the system.
#+BEGIN_SRC yml :tangle roles/nagios_server/tasks/main.yml :eval no
- name: Installing nagios
  yum: name=nagios state=installed
  environment: proxy_env

- name: Installing all nagios plugins 
  yum: name=nagios-plugins-all state=installed
  environment: proxy_env

- name: Installing nrpe nagios plugins
  yum: name=nagios-plugins-nrpe state=installed
  environment: proxy_env

- name: Installing nrpe
  yum: name=nrpe state=installed
  environment: proxy_env
#+END_SRC 
** Set firewall rules
- Firewall rules are set by following steps:
   1) Copy iptables configuration from ansible machine to the server.
   2) Restart iptables service to enforce the configuration.
#+BEGIN_SRC yml :tangle roles/nagios_server/tasks/main.yml
 - name: Copy iptables configuration file
   template: src=nagios_server_iptables dest=/etc/sysconfig/iptables owner=root group=root mode=600
   notify:
     - restart iptables
#+END_SRC
** Create Nagios admin user for web interface
#+BEGIN_SRC yml :tangle roles/nagios_server/tasks/main.yml
- name: creating nagiosadmin user for web interface
  command: "htpasswd -b /etc/nagios/passwd {{nagios_user}} {{nagios_password}}"
  notify: restart apache
#+END_SRC

** Set contacts.cfg
#+BEGIN_SRC yml :tangle roles/nagios_server/tasks/main.yml
- name: Updating contacts.cfg
  template: src=contacts.cfg.j2 dest=/etc/nagios/objects/contacts.cfg
  notify: restart nagios
#+END_SRC

** Set nagios.cfg
#+BEGIN_SRC yml :tangle roles/nagios_server/tasks/main.yml
- name: updating nagios.cfg
  lineinfile: dest="{{nagios_cfg_path}}" line="cfg_file=/etc/nagios/objects/servers.cfg" regexp="cfg_file\=/etc/nagios/objects/servers.cfg"
  notify: restart nagios
#+END_SRC

** Update servers by defining hosts and services to be monitored
#+BEGIN_SRC yml :tangle roles/nagios_server/tasks/main.yml
- tasks:
  include: configure_servers.yaml
#+END_SRc
** Set servers.cfg
#+BEGIN_SRC yml :tangle roles/nagios_server/tasks/configure_servers.yml
---
#configuring hosts
- name: "creating servers.cfg"
  template: src=servers.cfg dest=/etc/nagios/objects/servers.cfg mode=664
  notify: restart nagios
#+END_SRC
** Set additional commands
#+BEGIN_SRC yml :tangle roles/nagios_server/tasks/configure_servers.yml
# Additional Commands
- name: "create additional_commands.cfg"
  template: src=commands.cfg dest=/etc/nagios/objects/additional_commands.cfg mode=664
  notify: restart nagios
#+END_SRC
** Load additional commands
#+BEGIN_SRC yml :tangle roles/nagios_server/tasks/configure_servers.yml
- name: load additional_commands.cfg
  lineinfile: dest=/etc/nagios/nagios.cfg line="cfg_file=/etc/nagios/objects/additional_commands.cfg" regexp="cfg_file\=/etc/nagios/objects/additional_commands\.cfg"
  notify: restart nagios
#+END_SRC
** Start nagios service
- Any changes in nagios configuration is enforced by restarting the nagios
  service.
#+BEGIN_SRC yml :tangle roles/nagios_server/handlers/main.yml
- name: restart nagios
  sudo: true
  service: name=nagios state=restarted
#+END_SRC

** Start apache service
- Any changes in apache configuration is enforced by restarting the apache
  service.
#+BEGIN_SRC yml :tangle roles/nagios_server/handlers/main.yml
- name: restart apache
  sudo: true
  service: name=httpd state=restarted
#+END_SRC

** Start firewall service
- Any changes in iptables configuration file to update the firewall is enforced
  by restarting the iptables service.
#+BEGIN_SRC yml :tangle roles/nagios_server/handlers/main.yml
- name: restart iptables
  sudo: true
  service: name=iptables state=restarted
#+END_SRC

** Default value of parameters
- Set the default value of parameters 
#+BEGIN_SRC yml :tangle roles/nagios_server/defaults/main.yml
nagios_host: nagios.virtual-labs.ac.in
nagios_user: nagiosadmin
nagios_password: xxxxxxx
nagios_admin_name: 'Nagios Admin'
nagios_admin_email: jayanth@vlabs.ac.in
nagios_cfg_path: /etc/nagios/nagios.cfg
nrpe_cfg_path: /etc/nagios/nrpe.cfg
#+END_SRC

** Define Variables

#+BEGIN_SRC yml :tangle roles/nagios_server/vars/main.yml
nagios_host: nagios.virtual-labs.ac.in
nagios_user: nagiosadmin
nagios_password: xxxxxxx
nagios_admin_name: 'Nagios Admin'
nagios_admin_email: alerts@vlabs.ac.in
nagios_cfg_path: /etc/nagios/nagios.cfg

########################################
## vars used by configure_servers.yml ##
########################################
nagios_hosts:
     router: { hostname: "router.vlabs.ac.in", group: basic_services }
     ansible: { hostname: "ansible.vlabs.ac.in", group: basic_services }  
#     ossec_server: { hostname: "ossec-server.vlabs.ac.in", group: web }
     rsyslog_server: { hostname: "rsyslog-server.vlabs.ac.in", group: basic_services }
     private_dns: { hostname: "private-dns.vlabs.ac.in", group: basic_services }
#     public_dns: { hostname: "public-dns.vlabs.ac.in", group: basic_services }
     reverseproxy: { hostname: "reverseproxy.vlabs.ac.in", group: web }
  
nagios_host_groups:
     basic_services:
      - { service: "ssh", command: "check_ssh" }
      - { service: "ping", command: "check_ping!100.0,20%!500.0,60%" }
      - { service: "nrpe checking users", command: "check_nrpe!check_users"}
      - { service: "nrpe checking load", command: "check_nrpe!check_load"}

     web:
      - { service: "ssh", command: "check_ssh" }
      - { service: "http", command: "check_http" }
      - { service: "https", command: "check_tcp!443" }
      - { service: "ping", command: "check_ping!100.0,20%!500.0,60%" }
      - { service: "nrpe checking users", command: "check_nrpe!check_users"}
      - { service: "nrpe checking load", command: "check_nrpe!check_load"}

nagios_commands:
    - {name: 'check_nrpe', command: '$USER1$/check_nrpe -H $HOSTADDRESS$ -c $ARG1$'}

#+END_SRC
** Nagios Server Installation Script
- Nagiosg server is configured by using following roles
  1) =common=
  2) =ossec_client=
  3) =rsyslog_client=
  4) =nagios_server=
#+BEGIN_SRC yml :tangle nagios_server.yml
---
- name: This yml script configures nagios server
  hosts: nagios_server
  remote_user: root

  roles:
    - common
#    - ossec_client
#    - rsyslog_client
    - nagios_server
#+END_SRC

* Test Cases
1) Test sendmail service is able to send the mail.
2) Test all the services are being monitored.

* COMMENT Time Line
|------+------------------+---------------+----------------------------|
| S.no | Day              | Time          | Tasks                      |
|------+------------------+---------------+----------------------------|
|   1. | Thur Apr 2, 2015 | 9:00 - 11:00  | AWS Security Groups        |
|------+------------------+---------------+----------------------------|
|      |                  | 11:00 - 12:00 | Tried resolving            |
|      |                  |               | Nagios firewall issue      |
|------+------------------+---------------+----------------------------|
|      |                  | 12:00 - 12:30 | Personal work, out of      |
|      |                  |               | office                     |
|------+------------------+---------------+----------------------------|
|      |                  | 14:00 - 15:25 | Meeting with Mr. Saurabh   |
|------+------------------+---------------+----------------------------|
|      |                  | 15:25 - 15:40 | Discussion with Mr. Zubair |
|------+------------------+---------------+----------------------------|
|      |                  | 15:40 - 17:15 | Nagios Model               |
|------+------------------+---------------+----------------------------|
|   2. | Fri Apr 3, 2015  | 11:10 - 12:00 | Nagios Modeling            |
|------+------------------+---------------+----------------------------|
|      |                  | 12:10 - 12:50 | Create nagios_client.org   |
|      |                  |               | Modify IPtables conf       |
|------+------------------+---------------+----------------------------|
|      |                  | 12:50 -       | Work on nagios_client.org  |

* COMMENT Thoughts
1) How do we write the requirements for nagios server. Do services monitored on
   actual server are also to be captured in the requirements.
2) Document basic and web services; Assign services to roles.
3) state=present v/s state=installed
4) Rsyslog client or nagios client will not apply iptables rules.
