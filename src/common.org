#+Title: Common Roles Design Model and Implementation
#+Date: April 9, 2015. Thursday
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
\#+SETUPFILE: org-templates/level-0.org
#+OPTIONS: ^nil

* Introduction
The document describes the requirements, design and implementation of the common
role. Common role is applied on all the servers in the cluster. 

All the servers in the cluster are made secure by applying common security
measures.

* Requirements
** Functional Requirements
1) Set default gateway as router
2) Secure servers from brute-force attacks by capturing and banning suspected
   malicious attackers
3) Save history of executed command with time stamp
4) Increase size of history file
5) Start iptables service
6) Mail summary of log files periodically to system administrator
7) Permit root login without password
8) Disable ssh password based access
9) Enable key based authentication
10) Do not permit empty password
11) Install bind utilities
12) Lock root account
13) Remove sudoers package

* Design
** System Design Diagram
[[./diagrams/overall-model-aws-cluster.png]]

** Editable Link
[[https://docs.google.com/drawings/d/1-_1DAonwj9mfJYaXqHwZVHbzYEgDkzdTjOzDCBTpr-c/edit][Google Drawing Link]]

** Configuration Design

|-----------------+--------------------+-----------------------------------------|
| Requirement No. | Requirement        | Implementation                          |
|-----------------+--------------------+-----------------------------------------|
|              1. | Log file           | *logwatch* is configured to obtain log  |
|                 | summary            | file summary                            |
|-----------------+--------------------+-----------------------------------------|
|              2. | Securing the       | *sshd-config* is configured to allow    |
|                 |                    | only the ssh based access and disable   |
|                 |                    | password based access                   |
|-----------------+--------------------+-----------------------------------------|
|              3. | Auditing the       | History settings are configured         |
|                 | servers            | to log the commands run on the servers  |
|                 |                    | with time stamp                         |
|-----------------+--------------------+-----------------------------------------|
|              4. | Blocking malicious | *fail2ban* is configured to capture and |
|                 | attacks            | block suspicious attacker's IP          |
|-----------------+--------------------+-----------------------------------------|

** System Files
|------+----------+-------------------------+--------------------|
| S.no | Service  | File                    | File Type          |
|------+----------+-------------------------+--------------------|
|   1. | Iptables | /etc/sysconfig/iptables | Configuration File |
|------+----------+-------------------------+--------------------|
|   2. | Logwatch |                         |                    |
|------+----------+-------------------------+--------------------|
|   3. |          |                         |                    |

* Implementation

** Structure of the scripts
The implementation of this system is in terms of a collection of ansible scripts
that configure the machine.  These scripts are organized in the following way:

#+BEGIN_EXAMPLE
|-code
|   |-- common.yml
|   |-- roles
|   |   |-- common
|   |   |   |-- files
|   |   |   |   `-- history.sh
|   |   |   |-- handlers
|   |   |   |   `-- main.yml
|   |   |   |-- meta
|   |   |   |   `-- main.yml
|   |   |   |-- tasks
|   |   |   |   `-- main.yml
|   |   |   |-- templates
|   |   |   |   `-- resolv.conf
|   |   |   |-- vars
|   |   |   |   `-- main.yml
#+END_EXAMPLE

** Common Firewall Rules
Firewall rules are applied on all the systems. Some firewall rules are common
for all the system and are applied in all the servers. These common firewall
rules are described here. And rules which are specific to the server are
described in the individual server documentation itself.

*** Default rules for filter table
 Default policy for input, forward and output is set to ACCEPT. If packet does
  not match any rule then the default action is applied to the packet. Packets
  counters are set to [0:0]. First counter represents the number of packets that
  matched the rule for the chain, and the second counter represents the total
  size of the packets that matched the rule.
#+BEGIN_EXAMPLE
#If packet does not match any rule then the default action is applied to the packet
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
#+END_EXAMPLE 

*** Rule for INPUT loopback packets
 Allow internal communication between services running within the server, over
  loopback interface. Destination ip is also specified to avoid any security
  breach.
#+BEGIN_EXAMPLE
#Allow internal process to process communication over loopback interface
-A INPUT -i lo -d 127.0.0.0/8 -j ACCEPT
#+END_EXAMPLE
 
*** Rate limiting new connections
 This rule limit all new connections except UDP connections. Limit is set to a
  proper high value, to secure the system from flooded connections. Packets are
  dropped if they are received after the limit is exceeded. Dropped packets are
  logged with a limited rate. Once the rate of incoming packets is under
  control, system again starts accepting the connections.
#+BEGIN_EXAMPLE
#Rate limit new connections to 20 new connections per 30 seconds
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --set
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --rcheck --seconds 30 --hitcount 20 -m limit --limit 2/min -j LOG --log-prefix "new_limit_"
-A INPUT ! -p udp -m state --state NEW -m recent --name ssh_limit --rcheck --seconds 30 --hitcount 20 -j DROP
#+END_EXAMPLE

*** Rule for incoming ping request with rate limiting
 Allow server to accept incoming ping requests from anywhere. Limit is set to a
  proper high value, to secure the system from flooded connections. Packets are
  dropped if they are received after the limit is exceeded. Dropped packets are
  logged with a limited rate. Once the rate of incoming packets is under
  control, system again starts accepting the connections.
#+BEGIN_EXAMPLE
#Allow to accept incoming ping requests from anywhere
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG 
-A INPUT -p icmp --icmp-type echo-request -j DROP
#+END_EXAMPLE

*** Rule for ongoing connection from other machine
 Allow server to continue already related and established connections. Initial
  connection request would have passed through the firewall rules and if the
  connection got established, it is allowed to continue.
#+BEGIN_EXAMPLE
#Allow to continue already related and established connections
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
#+END_EXAMPLE

*** Rule for incoming ssh connection
 Allow server to accept incoming ssh TCP port 22 connections *only* from the
  ansible, nagios and management ips. A 'for loop' is used to enable rule for
  multiple management server and ansible server.
#+BEGIN_EXAMPLE
#Allowing incoming ssh connections only from the management ips. 
#Hopefully fail2ban will take care of bruteforce attacks from management IPs
{% for item in management_ips  %}  
-A INPUT -m state --state NEW -s {{ item }} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allowing incoming ssh connections only from ansible server. 
#Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in ansible_server_ips  %}
-A INPUT -m state --state NEW -s {{ item }} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allow incoming SSH connections from nagios server IPs.  Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in nagios_server_ips  %}  
-A INPUT -m state --state NEW -s {{item}} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#+END_EXAMPLE

*** Rule for incoming NRPE query from Nagios server
 Accept NRPE queries from Nagios.
#+BEGIN_EXAMPLE
#Allow to accept incoming nrpe queries from nagios server
-A INPUT -m state --state NEW -p tcp -m tcp --dport 5666 -j ACCEPT
#+END_EXAMPLE

*** Rule for incoming SNMP queries from Cacti server
 Accept input connections from cacti server.
#+BEGIN_EXAMPLE
#Allow to accept incoming snmp queries from cacti server
-A INPUT -p udp -m udp --dport 161 -j ACCEPT
-A INPUT -p udp -m udp --dport 162 -j ACCEPT
#+END_EXAMPLE

*** Rule for all other incoming connections
 Reject all the INPUT packets which does not match any of the defined rules
  with a reply message =icmp-host-prohibited= to the host machine. Rejected
  packets are also logged with a limited rate.
#+BEGIN_EXAMPLE
#Log all other "blocked_input_" attempts with rate limiting
-A INPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_input_"
#Drop all the INPUT packets which does not match any of the rules
-A INPUT -j REJECT --reject-with icmp-host-prohibited
#+END_EXAMPLE

*** Rule for FORWARD chain
 Forwarding rule is disabled if server is not responsible for any packet
  forwarding.
#+BEGIN_EXAMPLE
#Do not allow any packet to be forwarded
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
#+END_EXAMPLE

*** Rule for OUTPUT loopback packets
 Allow internal communication between services running within the system, over
  loopback interface. Source ip is also specified to avoid any security breach.
#+BEGIN_EXAMPLE
#Allow internal process to process communication over loopback interface
-A OUTPUT -s 127.0.0.0/8 -o lo -j ACCEPT
#+END_EXAMPLE

*** Rule for ongoing connection to other machine
 Allow server to continue already related and established connections. Initial
  connection request would have passed through the firewall rules and if the
  connection got established, it is allowed to continue.
#+BEGIN_EXAMPLE
#Allow to continue already related and established connections
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
#+END_EXAMPLE

*** Rule for outgoing dns request
 Allow server to make dns queries.
#+BEGIN_EXAMPLE
#Allow to make dns queries
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
#+END_EXAMPLE

*** Rule for sending log messages to rsyslog server
 Allow server to send log messages to rsyslog server.
#+BEGIN_EXAMPLE
#Allow to make dns queries
-A OUTPUT -p udp -m udp --dport 514 -j ACCEPT
#+END_EXAMPLE

*** Rule for sending mails by logwatch service
 Allow logwatch service running inside the server to send mail alerts.
#+BEGIN_EXAMPLE
#Allow to send mails by logwatch service
-A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT
#+END_EXAMPLE

*** Rule for outgoing web request by yum
 Allow yum service to update packages via http and https. 
#+BEGIN_EXAMPLE
#Allow yum to contact web servers for installing and updating packages
-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
#+END_EXAMPLE

*** Rule for outgoing connection to OSSEC server
 Allow server to send system's information to OSSEC server.
#+BEGIN_EXAMPLE
#Allow outgoing connections to OSSEC server
-A OUTPUT -p udp -m udp --dport 1514 -j ACCEPT
#+END_EXAMPLE
    
*** Rule for outgoing ping request
 Allow server to send ping requests to anywhere.
#+BEGIN_EXAMPLE
#Allow to send ping requests to anywhere.
-A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
#+END_EXAMPLE

*** Rule for all other outgoing packets
 Reject all the OUTPUT packets which does not match any of the defined rules
  with a reply message =icmp-host-prohibited= to the host machine. Rejected
  packets are also logged with a limited rate.
#+BEGIN_EXAMPLE
#Log all other "blocked_output_" attempts
-A OUTPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_output_"
#Reject all the OUTPUT packets which does not match any of the rules
-A OUTPUT -j REJECT --reject-with icmp-host-prohibited
#+END_EXAMPLE

*** Enforce filter rules
#+BEGIN_EXAMPLE
COMMIT
#+END_EXAMPLE
** Set Default Gateway
In the cluster only two machines - Router and Ansible, are part of both public
and private network. These machines have direct internet access. The gateway of
these two machines are set by the dhcp server.

All other machines in the cluster are only part of private network. These
machines do not have direct internet access. Machines get internet via the
Router. Machines forward packets to the Router, then the Router does the
required packet management to get internet for these machines. Technically
Router acts as a gateway for all the private servers.

To configure default gateway for private servers following actions are
performed:
1) Remove any default gateway if set already using following command:
#+BEGIN_EXAMPLE
route del default
#+END_EXAMPLE
2) Set default gateway as Router using following command:
#+BEGIN_EXAMPLE
route add default gw <gateway-ip>
#+END_EXAMPLE

These actions are executed from the configuration server as follows:
#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
---

- name: setting the default gw, skips if router or ansible server
  shell: route del default; route add default gw {{router_internal_ip}}
  when: not ( i_ans is defined or i_router is defined )
  ignore_errors: yes
#+END_SRC

** Block Malicious Attacks
Servers are protected from various brute-force attacks using a Fail2ban tool.
It ban an offensive host by adding rule in firewall and sends an email
notification to the system administrator. Fail2ban is installed on all the
servers.

To install and configure Fail2ban service following actions are performed:
1) Download epel repo
2) Install epel repo
3) Install fail2ban
4) Start fail2ban service

These actions are executed from the configuration server as follows:
#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
#Setup epel for downloading fail2ban
- name: Download epel RPM
  get_url: url="{{ epel_download_url }}" dest="{{epel_download_path}}" timeout=5
  environment: proxy_env

- name: Install epel RPM
  yum: name="{{epel_download_path}}" state=present
  environment: proxy_env

#Install fail2ban and enable it on startup
- name: Install fail2ban
  yum: name=fail2ban state=present

- name: Start and enable fail2ban service
  service: name=fail2ban state=started enabled=yes
#+END_SRC

** Save History of Executed Commands
Any command executed on the servers are logged with the time stamp. History
module in the system allows to maintain history of the commands.

Following history parameters are set:
 - HISTTIMEFORMAT :: sets the time format of time stamp
 - HISTSIZE       :: sets the number of lines or commands that are stored in
                     memory in a history list while bash session is ongoing
 - HISTFILESIZE   :: sets the number of lines or commands that are allowed in
                     the history file at startup time of a session, and are
                     stored in the history file at the end of bash session for
                     use in future sessions.

These parameters are set by executing shell script on the server, which is
defined as follows:
#+BEGIN_SRC shell :tangle roles/common/files/history.sh
#!/bin/bash
HISTTIMEFORMAT="%y %m %d %T"
HISTSIZE=100000
HISTFILESIZE=100000
export HISTTIMEFORMAT HISTSIZE HISTFILESIZE
#+END_SRC 

The shell script to set History parameters is executed from the configuration
server as follows:
#+BEGIN_SRC yaml :tangle roles/common/tasks/main.yml
#Configure history
- name: Configure history for all users with date/time and 100,000 lines of history
  copy: src=history.sh dest=/etc/profile.d/history.sh mode=755 owner=root group=root
#+END_SRC 

** Start Iptables service
Iptables service runs all the time inside the system. While setting up the
server iptables service is restarted. Although there may not be any firewall
rules set in the iptables, but it is made sure that the service is running
inside every server.
#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
#Restart iptables
- name: Restart iptables service 
#checking whether iptables is running is pointless
#restart would fail if there is no /etc/sysconfig/iptables file
  service: name=iptables state=restarted
  ignore_errors: yes
#+END_SRC

** Configure host name
Ask Saurabh
#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
#Setup /etc/hosts
- name: Configure hostname and fqdn to resolve to local IP on first line of /etc/hosts
#Necessary for containers so that they can send emails without 30 second delay
  lineinfile: dest=/etc/hosts regexp="{{ansible_default_ipv4.address}} {{ansible_fqdn}} {{ansible_hostname}}" insertbefore="BOF" line="{{ansible_default_ipv4.address}} {{ansible_fqdn}} {{ansible_hostname}}"
#+END_SRC

** Summary of Log files
Servers and applications generally create "log files" to keep track of
activities taking place at any given time. These log files are used for analysis
of the system. A unified report of all these log files is generated and send to
system administrator using *logwatch* tool.

To configure logwatch following actions are performed:
1) Install "logwatch" tool
2) Set detail of log level to "medium"

#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
---
#Logwatch configuration
- name: Install logwatch
  yum: name=logwatch state=installed
  environment: proxy_env

- name: Configure detailed logging via logwatch
  lineinfile: line="Detail = High" dest=/etc/logwatch/conf/logwatch.conf regexp="^Detail ="  
#+END_SRC

** Configure mail service
Various services such as "logwatch" run inside the system, which send email
alerts to the system administrator. These services use "Sendmail" service to
send email alerts.

To configure sendmail following actions are performed:
1) Install sendmail
2) Ensure postfix is stopped and disabled
3) Set smtp smart host
4) Start =sendmail= service

#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
#SMTP configuration
- name: Install sendmail SMTP server for outgoing email
  yum: name=sendmail state=installed
  environment: proxy_env

- name: Ensure that postfix is stopped and disabled
  service: name=postfix enabled=no state=stopped
#if postfix is not present ignore error
  ignore_errors: yes

- name: Configure SMART_HOST if necessary
  lineinfile: line="define(`SMART_HOST', `{{smtp_smart_host}}')dnl" regexp="SMART_HOST" dest="/etc/mail/sendmail.mc"
  when: smtp_smart_host != "none"
  notify:
    - restart sendmail

- name: Ensure that sendmail is running and enabled
  service: name=sendmail enabled=yes state=started
#+END_SRC

** Set Nameserver
Nameservers are set on the systems in =/etc/resolv.conf= file. An example
configuration file is shown below:

#+BEGIN_EXAMPLE
search localdomain.com
nameserver 10.4.12.230
#+END_EXAMPLE

- search :: This field allows users to type simple names instead of complete
            'fqdn' to reach local resources. If something comes to resolver that
            has no dots '.' in it, the resolver will try adding
            =localdomain.com= in it.
- nameserver :: This field specifies the ip address of the dns servers.

#+BEGIN_SRC conf :tangle roles/common/templates/resolv.conf
{% if private_dns_zone != "none" %}
search {{private_dns_zone}}
{% endif %}
{% for private_dns in private_dns_ips %}
nameserver {{private_dns}}
{% endfor %}
#+END_SRC

Configuration file - =resolv.conf= is copied to the system from the
configuration server as follows: 

#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
#Configure private DNS if values are set 
- name: Configure machine to use private DNS (peerDNS)
  template: src=resolv.conf dest=/etc/resolv.conf owner=root group=root mode=644
  when: private_dns_ips != "none" 
#+END_SRC

** SSH Hardening
Systems are secured by hardening =ssh= service. SSH service allows to set
various parameters to make the systems more secure.

In all the servers in the cluster following measures are taken by configuring
=/etc/ssh/sshd_config= file.

*** Permit Root Login without password
Only System administrators with ssh private key can login as Root.
simpler for playbooks.
no "sudo su -"
*** Disable Password based access
*** Enable Key based authentication
*** Do not permit empty passwords

#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
- name: Permit root login without-pasword(key based)
  lineinfile: dest=/etc/ssh/sshd_config regexp='PermitRootLogin ' line='PermitRootLogin without-password' state=present

- name: Disable Password authentication
  lineinfile: dest=/etc/ssh/sshd_config regexp='PasswordAuthentication ' line='PasswordAuthentication no'

- name: Enable Public key authentication
  lineinfile: dest=/etc/ssh/sshd_config regexp='PubkeyAuthentication ' line='PubkeyAuthentication yes'

- name: Do not permit empty password, also ensure proper owner, group and permissions
  lineinfile: dest=/etc/ssh/sshd_config regexp='PermitEmptyPasswords ' line='PermitEmptyPasswords no' mode=0600 owner=root group=root

#Call handler to restart sshd
  notify:
      - restart sshd
#+END_SRC

** Install Bind Utilities
Bind utilities are installed on all the servers in the cluster. This package
includes the programs such as =nslookup= , =dig= and =host=. These utilities are
used by system administrator to trouble shoot the network related issues.

#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
- name: install bind-utils
  yum: name=bind-utils state=present
  environment:
   proxy_env
#+END_SRC

** Lock Root Account
Root account is disabled by default on some versions of Linux. It essentially
means the password for the root account is set to a value which matches no
possible encrypted value, therefore nobody can login as root with password.

On all the servers in the cluster root account is locked - no root password is
set. Only system administrators with ssh private keys can login to root account.
Password for root account can be set using =sudo passwd root= command.

The way to lock root account is to execute =passwd -l root= command on the
system.

#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
- name: lock root account
  shell: passwd -l root
#+END_SRC

** Remove sudoers package
Sudoers package is removed from all the servers in the cluster.

#+BEGIN_SRC yml :tangle roles/common/tasks/main.yml
- name: remove sudo
  yum: name=sudo state=absent
#+END_SRC

** Common Variables
Several common variables which are common across all ansible roles are defined
in =common_vars= file. The file is included as a dependency.

#+BEGIN_SRC yml :tangle roles/common/meta/main.yml
---
dependencies:
  - role: common_vars
#+END_SRC

** Way to restart services
When any changes are made in the configuration file of any service, the service
needs to be restarted. For example if modifications are made to
=/etc/ssh/sshd_config=, then the ssh service needs to be restarted to enforce
the modified properties of the system. 

#+BEGIN_SRC yml :tangle roles/common/handlers/main.yml
---
- name: restart sendmail
  service: name=sendmail state=restarted

- name: restart sshd
  service: name=sshd state=restarted
#+END_SRC
    
* COMMENT Timeline
|------+-------------------------+------------+------------+------------------------------------------------------|
| S.no | Day                     | Start Time | End Time   | Tasks                                                |
|------+-------------------------+------------+------------+------------------------------------------------------|
|   1. | April 9, 2015, Thursday | 09:20 a.m. | 12:30 p.m. | - Confirm tangle output is same as aws implmentation |
|      |                         |            |            | - Write Down functional and  security requirements.  |
|      |                         |            |            | - Make a common design diagram                       |
|      |                         |            |            | - Correct structure of scripts                       |
|      |                         |            |            | - Make changes in firewall description               |
|------+-------------------------+------------+------------+------------------------------------------------------|
|   2. | April 10, 2015. Friday  | 9:15 a.m.  | 01:20 p.m. | - Test cases for firewall rules                      |
|      |                         |            |            | - Start documenting configuration files.             |
|      |                         |            |            | - Only tasks and templates files are left.           |
|------+-------------------------+------------+------------+------------------------------------------------------|
|      |                         | 02:30 p.m. |            | - Complete description of configuration files.       |
* COMMENT TODO
1) Configure hostname
2) SSH hardening subsections
3) Why sudoers package is removed ?
4) Write test cases for Common firewall.
5) Test root account is locked using "sudo passwd -S root"
6) Does internal traffic on the aws also goes through router ?
7) Systems files.
