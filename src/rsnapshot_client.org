#+TITLE:     Rsnapshot Client - Design Model and Implementation
#+DATE:      2015-04-15 Wednesday
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
//#+SETUPFILE: org-templates/level-0.org
#+DESCRIPTION: Rsnapshot Client Design Model Documentation
#+OPTIONS: ^:nil

* Introduction
This document describes the design and implementation of Rsnapshot Client.

* Requirements
** Functional Requirements
1) Accept incoming ssh connections from rsnapshot server.
2) Install rsync package.
3) Apply all common firewall rules.

** Security Requirements
1) Security requirements are define in common role.

* Design
Given diagram describes the design of the rsnapshot client. Systems files are
listed for a quick overview of whole systems.

** System Design Diagram
[[./diagrams/rsnapshot-client-design-diagram.png]]

** Editable Link
[[https://docs.google.com/drawings/d/1rrCMXTHNn8pS8cNscu3w1Ba4jitfmkL9EiYaWDvETWA/edit][Link to google drawing board]]

** System Files
|------+----------+----------------------------+--------------------|
| S.no | Service  | File                       | Description        |
|------+----------+----------------------------+--------------------|
|   1. | Iptables | /etc/sysconfig/iptables    | Configuration File |
|------+----------+----------------------------+--------------------|
|   2. | SSH      | /root/.ssh/authorized_keys | Authorized keys    |
|------+----------+----------------------------+--------------------|

** Configuration Design
Rsnapshot server rsynchs the files to be backed up from all the server in the
cluster over ssh.

* Implementation
** Structure of Scripts
The implementation of this system is in terms of a collection of Ansible scripts
which configure the machine. These scripts are organized as follows:

#+BEGIN_EXAMPLE
|-- rsnapshot_client.yml
|-- roles
|   |   |-- rsnapshot_client
|   |   |   |-- tasks
|   |   |   |   `-- main.yml
|   |   |   `-- vars
|   |   |       `-- main.yml
#+END_EXAMPLE

** Firewall Rules
Firewall rules applied to rsnapshot client are mentioned here. Description of
firewall rules which are common across all the systems are defined in the common
role. There are no specific firewall rule, all the common rules are applied.

*** Common Firewall Rules
#+BEGIN_EXAMPLE
#If packet does not match any rule then the default action is applied to the packet
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

#Allow internal process to process communication over loopback interface
-A INPUT -i lo -d 127.0.0.0/8 -j ACCEPT
 
#Rate limit new connections to 20 new connections per 30 seconds
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --set
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --rcheck --seconds 30 --hitcount 20 -m limit --limit 2/min -j LOG --log-prefix "new_limit_"
-A INPUT ! -p udp -m state --state NEW -m recent --name ssh_limit --rcheck --seconds 30 --hitcount 20 -j DROP

#Allow to accept incoming ping requests from anywhere
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG 
-A INPUT -p icmp --icmp-type echo-request -j DROP

#Allow to continue already related and established connections
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

#Allowing incoming ssh connections only from the management ips. 
#Hopefully fail2ban will take care of bruteforce attacks from management IPs
{% for item in management_ips  %}  
-A INPUT -m state --state NEW -s {{ item }} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allowing incoming ssh connections only from ansible server. 
#Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in ansible_server_ips  %}
-A INPUT -m state --state NEW -s {{ item }} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allow incoming SSH connections from nagios server IPs.  Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in nagios_server_ips  %}  
-A INPUT -m state --state NEW -s {{item}} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}

#Allow to accept incoming nrpe queries from nagios server
-A INPUT -m state --state NEW -p tcp -m tcp --dport 5666 -j ACCEPT

#Allow to accept incoming snmp queries from cacti server
-A INPUT -p udp -m udp --dport 161 -j ACCEPT
-A INPUT -p udp -m udp --dport 162 -j ACCEPT

#Log all other "blocked_input_" attempts with rate limiting
-A INPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_input_"
#Drop all the INPUT packets which does not match any of the rules
-A INPUT -j REJECT --reject-with icmp-host-prohibited

#Do not allow any packet to be forwarded
-A FORWARD -j REJECT --reject-with icmp-host-prohibited

#Allow internal process to process communication over loopback interface
-A OUTPUT -s 127.0.0.0/8 -o lo -j ACCEPT

#Allow to continue already related and established connections
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

#Allow to make dns queries
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT

#Allow server to send log messages to rsyslog server
-A OUTPUT -p udp -m udp --dport 514 -j ACCEPT

#Allow to send mails by logwatch service
-A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT

#Allow yum to contact web servers for installing and updating packages
-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT

#Allow outgoing connections to OSSEC server
-A OUTPUT -p udp -m udp --dport 1514 -j ACCEPT
    
#Allow to send ping requests to anywhere.
-A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT

#Log all other "blocked_output_" attempts
-A OUTPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_output_"
#Reject all the OUTPUT packets which does not match any of the rules
-A OUTPUT -j REJECT --reject-with icmp-host-prohibited

COMMIT
#+END_EXAMPLE

** Installing Rsync package
Update the server and install the =rsync= package.

#+BEGIN_SRC yml :tangle roles/rsnapshot_client/tasks/main.yml :eval no
- name: updating packages
  yum: name=* state=latest
  environment: proxy_env 

- name: Installing rsync
  yum: name=rsync state=installed
  environment: proxy_env
#+END_SRC

** Copy SSH Keys
Rsnapshot server ssh public key is placed inside rsnapshot client machine as
authorized keys. Value of =rsnaphot_server_pub_key= variable is fetched from
=vars/main.yml= file.

#+BEGIN_SRC yml :tangle roles/rsnapshot_client/tasks/main.yml :eval no
- name: copying public key of rsnapshot-server to authorized_keys of client
  shell: echo {{ rsnaphot_server_pub_key }} >> /root/.ssh/authorized_keys
#+END_SRC

** Variables Definition
Rsnaphost server's ssh-public keys are to be placed in the rsnapshot client
machine as authorized keys. System administrator has to assign the value of
=rsnaphot_server_pub_key= variable as ssh-public key.
  
#+BEGIN_SRC yml :tangle roles/rsnapshot_client/vars/main.yml :eval no
#Public key fetched from rsnapshot server to ansible server( present in rsnapshot_public_key/<rsnapshot_server_name>/root/.ssh/id_rsa.pub)
rsnaphot_server_pub_key: "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6LPC+WU+OfFQtIqRZe2pZ5+gyg+orCk4m8sLpQL25TU95pr/Z7inwS+0gScqBxV7n7tRuW+cojDOe0tE5hb7OuNob49hFHUMXZWPobEIRIBizvSqjp6XklEsRTfkalSXCE2vIYZRHqZ/RG3jY4ME+xyA82AV0UwsmvIAxgWW8rkQdyG34Jdo7h3iyEs8AHGwPsSWT0ckoA0H/39ZaAOIgvdsCjRVvUTwFfwwcuvbGgO6cyhwEcC077eRzshNAnagHOhD4kZ5aheFP4fZJMXkJMO9w0prT+SyoDdloPlvdqbFUjM6YC6JpuEuqs6+cY+qapGZZQnV13YZxbU2+XEEUQ== ansible-generated on rsnapshot.vlabs.ac.in"
#+END_SRC

* Test Cases
** Test Case-1
*** Objective: 
Test rsync package is installed.
*** Apparatus:
1. Rsnapshot client machine

*** Theory
Rsnapshot server takes backup of data from the client machine using rsync tool.
*** Experiment
**** Verify rsync package is installed using following command
#+BEGIN_EXAMPLE
rpm -qa | grep rsync
#+END_EXAMPLE

*** Result
Output of step-1 of experiment shows rsync package is installed. It also shows
the version of the package which is =3.0.6-12= in this case.
#+BEGIN_EXAMPLE
rsync-3.0.6-12.el6.x86_64
#+END_EXAMPLE

*** Observation
Rsync package is installed on the machine.

*** Conclusion
Rsync package is installed on the machine.

