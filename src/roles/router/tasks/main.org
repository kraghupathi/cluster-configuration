#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: 
#+PROPERTY: exports code



* Configuring filtering rules
#+BEGIN_SRC  :tangle ./templates/iptable
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
# Allowing 80 and 443 from anywhere
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -m state --state NEW -p tcp -m tcp --dport 80 -j ACCEPT
-A INPUT -m state --state NEW -p tcp -m tcp --dport 443 -j ACCEPT
-A INPUT -j DROP

#Allow incoming SSH connections.  Hopefully denyhosts will take care of bruteforce attacks
-A INPUT -p tcp -s {{iiit-network}} --dport 22  -j ACCEPT
#-A INPUT -m state -s {{ --state NEW -p tcp -m tcp --dport 22 -j ACCEPT
#Allow incoming HTTP, HTTPS connection

#+END_SRC


* Forward port 80/443 to Reverse Proxy.
#+BEGIN_SRC yaml
-A PREROUTING -d {{router public-ip}} --dport 80 -p tcp -j DNAT --to-destination {{reverse proxy private-ip}}
-A PREROUTING -d {{router public-ip}} --dport 443 -p tcp -j DNAAT --to-destincation {{reverse proxy private-ip}}
#+END_SRC

* SNAT traffic comming from Reverse Proxy on port 80,443 with Router Public IP
#+BEGIN_SRC yaml
-A POSTROUTING -s {{reverse proxy private-ip}} --sport 80 -p tcp -j SNAT --to-source {{router public-ip}}
-A POSTROUTING -s {{reverse proxy private-ip}} --sport 443 -p tcp -j SNAT --to-source {{router public-ip}}
#+END_SRC

* Forward port 53 tcp/udp to Public DNS.
#+BEGIN_SRC yaml
-A PREROUTING -d {{public-dns public-ip}} --dport 53 -p udp -j DNAT --to-destination {{public-dns private-ip}}
-A PREROUTING -d {{public-dns public-ip}} --dport 53 -p tcp -j DNAT --to-destination {{public-dns private-ip}}
#+END_SRC

* SNAT traffic coming from Public DNS on port 53 with Router Public IP
#+BEGIN_SRC yaml
-A POSTROUTING -s {{public-dns private-ip}} --sport 53 -p tcp -j SNAT --to-source {{router public-ip}}
-A POSTROUTING -s {{public-dns private-ip}} --sport 53 -p udp -j SNAT --to-source {{router public-ip}}
#+END_SRC

* Allow ongoing connection
#+BEGIN_SRC yaml
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
#+END_SRC

* Allow incoming ssh connection only from Ansible server.
#+BEGIN_SRC yaml
-A INPUT -m state --state NEW -p tcp --dport 22 -s {{ansible-server private-ip}} -j ACCEPT
#+END_SRC

* Drop all other incoming packets on port 22
#+BEGIN_SRC 
-A INPUT -p tcp --dport 22 -j DROP
#+END_SRC

* Ports 80,443,53 open for all
#+BEGIN_SRC yaml
-A INPUT
#+END_SRC
