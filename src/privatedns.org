#+TITLE: Private DNS
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org

* Introduction
This document describes the requirements, design and implementation of
the *Private Domain Name Server* which is part of the AWS cluster.
This server is used to provide domain name resolution for all other
servers in the cluster. The name "Private" is a term coined by us to
distinguish the primary functionality of the DNS. This DNS is used for
internal name resolution.  Also it is used for the internal machines
to relove Using Ansible, a machine is configured using multiple roles.
A role is a specific set of configurations.

* Requirements
The functional and security requirements of the Private DNS are
mentioned in the following sections. These are specific the Private
DNS. The requirements which are common to all the roles are mentioned
in the [[common%20role][common role]].
** Functional
   - Resolve our authoritative domain names for all internal clients
   - Zone entries should be configurable (from a particular file on
     ansible server)
   - Resolve all domain names for internal clients (Peer DNS).
** Security
   - Allow port 53 (UDP) *only* from any machine in the cluster.

* Design
** Overall network diagram of Private DNS
#+CAPTION:  Private DNS Network Diagram
#+LABEL:  fig-private-dns-diagram
#+NAME: fig-private-dns-diagram
The following network diagram represents the interaction of the
Private DNS with the other machines in the cluster. This diagram
primarily focuses on the functionality of the Named server. It shows
the various machines in the network to which it provides its service
and also those which are required to help it achieve its
functionality.\\

The Reverse Proxy, Configuration Server and the other machines in the
cluster use the Private DNS for resolving the hostnames of the
machines in the cluster. The Private DNS requires the Router to be
able to contact the root DNS servers for providing the internal
machines to update or install certain packages.

[[./diagrams/private-dns-network-diagram.png]]

** System files 
The Following tables gives the information about the services and
their configuration files where modifications are required to setup
the Named Server.
|------+----------+-------------------------------+--------------------------------|
| S.no | Service  | File                          | File Type                      |
|------+----------+-------------------------------+--------------------------------|
|    1 | named    | /etc/name.conf                | named main Configuration       |
|------+----------+-------------------------------+--------------------------------|
|    2 | named    | /var/named/<domain_name>.zone | Zone files for the authorized  |
|      |          |                               | name resolution of that domain |
|------+----------+-------------------------------+--------------------------------|
|    3 | iptables | /etc/sysconfig/iptables       | firewall rules                 |
|------+----------+-------------------------------+--------------------------------|


* Implementation
** Structure of the scripts
   - The implementation of this system is in terms of a collection of
     Ansible scripts that configure the machine. These scripts are
     organized as follows:

#+BEGIN_EXAMPLE
|-code
|   |-- privatedns.yml
|   |-- roles
|   |   |-- named_server
|   |   |   |-- handlers
|   |   |   |   `--main.yaml
|   |   |   |-- tasks
|   |   |   |   `--main.yaml
|   |   |   |-- templates
|   |   |   |   `--main.yaml
|   |   |   |-- vars
|   |   |   |   `--main.yaml
|   |   |   |-- meta
|   |   |       `--main.yaml
#+END_EXAMPLE

** Installing the bind service
   - The BIND service has to be setup for configuring the machine as a
     DNS. This is done by the following code:

#+BEGIN_SRC YAML :tangle roles/named_server/tasks/main.yaml
---
- name: Install bind and bind-utils package
  yum: name="{{item}}" state=present
  with_items:
    - bind
    - bind-utils
#+END_SRC
** Configuring the Bind service
#+BEGIN_SRC 
- name: Create custom named.conf with desired zone
  template: src=named.conf dest=/etc/named.conf owner=root group=named mode=640
  notify:
    - restart bind

- name: Copy zone forward files for all zones to /var/named
  template: src="zone.forward" dest="/var/named/{{item}}forward" owner=root group=named mode=640
  with_items: zone_names
  notify:
    - restart bind

- name: Disable IPv6 support
  lineinfile: dest=/etc/sysconfig/named line='OPTIONS="-4"' regexp="^OPTIONS"
  notify:
    - restart bind

- name: Start and enable bind service
  service: name=named state=started enabled=yes

- name: Configure strong firewall on bind/named server
  template: src=named_iptables dest=/etc/sysconfig/iptables
  notify:
    - restart iptables

#+END_SRC

** Building the firewall rules
** Apply firewall rules

#+BEGIN_SRC YAML :tangle roles/named_server/templates/named_iptables
*filter
:INPUT ACCEPT [-1:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
#Accept loopback connections
-A INPUT -i lo -d 127.0.0.0/8 -j ACCEPT
#Rate limit new connections to 20 new connections per 30 seconds
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --set
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --rcheck --seconds 30 --hitcount 20 -m limit --limit 2/min -j LOG --log-prefix "new_limit_"
-A INPUT ! -p udp -m state --state NEW -m recent --name ssh_limit --rcheck --seconds 30 --hitcount 20 -j DROP
#Accept ICMP ping requests at limited rate
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG
-A INPUT -p icmp --icmp-type echo-request -j DROP
#Allow ongoing connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
#Allow incoming SSH connections from management IPs.  Hopefully fail2ban will take care of bruteforce attacks from management IPs
{% for item in management_ips  %}
-A INPUT -m state --state NEW -s {{item}} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allow incoming SSH connections from ansible server IPs.  Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in ansible_server_ips  %}
-A INPUT -m state --state NEW -s {{item}} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allow access to DNS from everywhere.  The allow_query option in DNS will take care of limiting clients. 
-A INPUT -m state --state NEW -p udp -m udp --dport 53 -j ACCEPT
#Allow incoming NRPE queries for nagios from nagios servers
#-A INPUT -m state --state NEW -p tcp -m tcp --dport 5666 -j ACCEPT
#Allow SNMP queries from cacti servers
#-A INPUT -p udp -m udp --dport 161 -j ACCEPT
#-A INPUT -p udp -m udp --dport 162 -j ACCEPT
#Log all other "blocked_input_" attempts with rate limiting
-A INPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_input_"
#Reply with proper ICMP error message and reject the connection
-A INPUT -j REJECT --reject-with icmp-host-prohibited
#Disable packet forwarding through firewall
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
#
#
##Output rules
#Allow outgoing connections to localhost
-A OUTPUT -s 127.0.0.0/8 -o lo -j ACCEPT
#Allow ongoing connections
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
#Allow DNS queries
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
#Allow server to send emails.  Required for sending logwatch emails
-A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT
#Allow server to contact web-servers.  Required for yum update and installation
#For restrictive configurations this can be disabled after install
-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
#Allow outgoing connections to rsyslog server
-A OUTPUT -p udp -m udp --dport 514 -j ACCEPT
#Allow outgoing connections to OSSEC server
-A OUTPUT -p udp -m udp --dport 1514 -j ACCEPT
#Allow outgoing ping requests
-A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
#Log all other "blocked_output_" attempts
-A OUTPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_output_"
#Reply with proper ICMP error message and reject the connection
-A OUTPUT -j REJECT --reject-with icmp-host-prohibited
COMMIT
#
#+END_SRC
** Handlers
#+BEGIN_SRC YAML :tangle roles/named_server/handlers/main.yaml
---
- name: restart bind
  service: name=named state=restarted

- name: restart iptables
  service: name=iptables state=restarted
#+END_SRC

** Dependencies
#+BEGIN_SRC YAML :tangle roles/named_server/meta/main.yaml
---
dependencies:
  - role: common_vars
#+END_SRC
** Putting it together

#+BEGIN_SRC YAML :tangle privatedns.yaml 
---
- name: This file configures private dns server
  hosts: private_dns
  remote_user: root

  vars:
    zone_file_prefix: private. 
    zone_names: 
      - virtual-labs.ac.in.
      - vlabs.ac.in.
    allow_query_from: "10.0.0.0/8; 172.16.0.0/12; 192.168.0.0/16;"

  roles:
    - common
    - rsyslog_client
    - ossec_client
    - named_server
#+END_SRC


* COMMENT Provisioning
  The Private DNS server is setup by the Configuration management
  server. The machine configurations are as described below :

** Creation
   The bare machine to setup a Private DNS is created using the AWS
   console by providing the private IP address.

** Machine Configuration
   + OS :: Centos 6.6
   + Architechture :: x86_64
   + Memory :: 1024MB
   + Disk space :: 25GB
   + Interface :: eth0
** Access 
   This machine can be accessed only by the configuration management server.


* Test Cases
