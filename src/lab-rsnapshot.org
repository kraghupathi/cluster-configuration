#+TITLE:     Lab Rsnapshot Server Role
#+DATE:      2015-07-30 Thursday
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+DESCRIPTION: Lab Rsnapshot Server Design Model Documentation
#+OPTIONS: ^:nil

* Introduction
* Requirements

** Functional Requirements
** Security Requirements

* Design
** Assumptions
 It is assumed that a container/instance running lab will,

 1) Only have sources from a single lab and,
 2) This lab has corresponding backup scripts as defined [[https://github.com/Virtual-Labs/summer-2015-iitg-workshop/blob/master/lifecycle/lifecycle.org][in lifecycle
    management]].

If it has two lab sources then backups taken are not reliable, the
restoration of a lab with such backed up sources/dumps cannot be
guaranteed.  This is due to the current limitation in the
implementation, we are assuming that under the home directory of the
=root= account there are sources of a single lab.

** System Design Diagram
** System Files
* Implementation
** Structure of Scripts
** Firewall Rules

#+BEGIN_SRC yml -n :tangle roles/lab_rsnapshot_server/templates/rsnapshot_server_iptables :eval no
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

#Accept loopback connections
-A INPUT -i lo -d 127.0.0.0/8 -j ACCEPT

#Rate limit new connections to 20 new connections per 30 seconds
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --set
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --rcheck --seconds 30 --hitcount 20 -m limit --limit 2/min -j LOG --log-prefix "new_limit_"
-A INPUT ! -p udp -m state --state NEW -m recent --name ssh_limit --rcheck --seconds 30 --hitcount 20 -j DROP

#Accept ICMP ping requests at limited rate
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG
-A INPUT -p icmp --icmp-type echo-request -j DROP

#Allow ongoing connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

#Allow incoming SSH connections from ansible server IPs.
{% for item in ansible_server_ips  %}
-A INPUT -m state --state NEW -s {{item}} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}

#Allow incoming NRPE queries for nagios from nagios servers
-A INPUT -m state --state NEW -p tcp -m tcp --dport 5666 -j ACCEPT

#Allow SNMP queries from cacti servers
-A INPUT -p udp -m udp --dport 161 -j ACCEPT
-A INPUT -p udp -m udp --dport 162 -j ACCEPT

#Log all other "blocked_input_" attempts with rate limiting
-A INPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_input_"

#Drop all other input packets
-A INPUT -j DROP

#Disable packet forwarding
-A FORWARD -j DROP

##Output rules
#Allow outgoing connections to localhost
-A OUTPUT -s 127.0.0.0/8 -o lo -j ACCEPT

#Allow outgoing connections to ansible server on port22
{% for item in ansible_server_ips  %}
-A OUTPUT -d {{item}} -p tcp -m tcp --sport 22 -j ACCEPT
{% endfor %}

#Allow ongoing connections
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

#Allow SSH
-A OUTPUT -p tcp -m tcp --dport 22 -j ACCEPT

#Allow server to send emails.  Required for sending logwatch emails
-A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT

#Allow https to contact yum
-A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT

#Allow to make DNS queries
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT

#Allow outgoing ping requests
-A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT

#Allow outgoing connections to rsyslog server
-A OUTPUT -p udp -m udp --dport 514 -j ACCEPT

#Allow outgoing connections to OSSEC server
-A OUTPUT -p udp -m udp --dport 1514 -j ACCEPT

#Log all other "blocked_output_" attempts
-A OUTPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_output_"

#Reply with proper ICMP error message and reject the connection
-A OUTPUT -j REJECT --reject-with icmp-host-prohibited

COMMIT
#
#+END_SRC

** Configure =rsnapshot=
   Rsnapshot uses =/etc/rsnapshot.conf= file for configuration. Two
   very important points about configuration file are:
   - All paths must end with "/" and all backup destination should be
     relative
   - Various fields in file are separated using Tab, space does not
     separates fields

   Following actions are performed in =/etc/rsnapshot.conf= file to
   configure rsnapshot service.

*** Configure absolute path of backup location
    Absolute path on current system where backup data will be stored is
    configured via 'snapshot_root' directive. In case of remote
    backups, rsnapshot always run on backup server and not on client to
    be backed up.

#+BEGIN_EXAMPLE
snapshot_root   /.snapshots/
#+END_EXAMPLE

*** Configure =cmd_ssh=
    In order to enable remote backup, we need to configure =rsnapshot=
    to use =ssh=, this is achieved by uncommenting the =cmd_ssh=
    directive. Without this the remote backup will fail.

#+BEGIN_EXAMPLE
cmd_ssh /usr/bin/ssh
#+END_EXAMPLE

*** Backup intervals
    Rsnapshot retains a set of backups, this can be defined. Here we
    are using the default interval settings which come with stock
    configuration. In the following the second column can be any
    arbitary name which signifies the backup, for example, for the
    =hourly= backup it stores the six recent backup copies, when a new
    backup is taken it replaces the last recent one, like in first in
    and last out fashion and so on.

    Here we are using the default choice which comes with stock
    =rsnapshot= configuration.

#+BEGIN_EXAMPLE
interval        hourly  6
interval        daily   7
interval        weekly  4
interval        monthly 3
#+END_EXAMPLE

*** SSH keys
    While creating an image for the lab containers, we copied two
    public keys, we can use one of the key for connecting over =ssh=
    or place another key using Ansible.  This is in order to simplify
    the implementation, as placing a public key is one time task.

*** Configure rsnapshot for remote backup
    The lab rsnapshot server is designed for taking backup of remote
    servers over =ssh=, as the lab backup server itself does not have
    anything other than the lab backups, we can disable localhost
    backup of this server. In short it is configured to backup only
    the labs.  We then disable the localhost backups accordingly.

*** Rsnapshot config file
    The complete configuration file is as follows:

#+BEGIN_SRC yml :tangle roles/lab_rsnapshot_server/templates/rsnapshot.conf.j2 :eval no
#################################################
# rsnapshot.conf - rsnapshot configuration file #
#################################################
#                                               #
# PLEASE BE AWARE OF THE FOLLOWING RULES:       #
#                                               #
# This file requires tabs between elements      #
#                                               #
# Directories require a trailing slash:         #
#   right: /home/                               #
#   wrong: /home                                #
#                                               #
#################################################

#######################
# CONFIG FILE VERSION #
#######################

config_version	1.2

###########################
# SNAPSHOT ROOT DIRECTORY #
###########################

# All snapshots will be stored under this root directory.
#
snapshot_root	/.snapshots/

# If no_create_root is enabled, rsnapshot will not automatically create the
# snapshot_root directory. This is particularly useful if you are backing
# up to removable media, such as a FireWire or USB drive.
#
#no_create_root	1

#################################
# EXTERNAL PROGRAM DEPENDENCIES #
#################################

# LINUX USERS:   Be sure to uncomment "cmd_cp". This gives you extra features.
# EVERYONE ELSE: Leave "cmd_cp" commented out for compatibility.
#
# See the README file or the man page for more details.
#
cmd_cp		/bin/cp

# uncomment this to use the rm program instead of the built-in perl routine.
#
cmd_rm		/bin/rm

# rsync must be enabled for anything to work. This is the only command that
# must be enabled.
#
cmd_rsync	/usr/bin/rsync

# Uncomment this to enable remote ssh backups over rsync.
#
cmd_ssh	/usr/bin/ssh

# Comment this out to disable syslog support.
#
cmd_logger	/usr/bin/logger

# Uncomment this to specify the path to "du" for disk usage checks.
# If you have an older version of "du", you may also want to check the
# "du_args" parameter below.
#
cmd_du		/usr/bin/du

# Uncomment this to specify the path to rsnapshot-diff.
#
#cmd_rsnapshot_diff	/usr/local/bin/rsnapshot-diff

# Specify the path to a script (and any optional arguments) to run right
# before rsnapshot syncs files
#
#cmd_preexec	/path/to/preexec/script

# Specify the path to a script (and any optional arguments) to run right
# after rsnapshot syncs files
#
#cmd_postexec	/path/to/postexec/script

#########################################
#           BACKUP INTERVALS            #
# Must be unique and in ascending order #
# i.e. hourly, daily, weekly, etc.      #
#########################################

interval	hourly	6
interval	daily	7
interval	weekly	4
interval	monthly	3

############################################
#              GLOBAL OPTIONS              #
# All are optional, with sensible defaults #
############################################

# Verbose level, 1 through 5.
# 1     Quiet           Print fatal errors only
# 2     Default         Print errors and warnings only
# 3     Verbose         Show equivalent shell commands being executed
# 4     Extra Verbose   Show extra verbose information
# 5     Debug mode      Everything
#
verbose		2

# Same as "verbose" above, but controls the amount of data sent to the
# logfile, if one is being used. The default is 3.
#
loglevel	2

# If you enable this, data will be written to the file you specify. The
# amount of data written is controlled by the "loglevel" parameter.
#
logfile	/var/log/rsnapshot

# If enabled, rsnapshot will write a lockfile to prevent two instances
# from running simultaneously (and messing up the snapshot_root).
# If you enable this, make sure the lockfile directory is not world
# writable. Otherwise anyone can prevent the program from running.
#
lockfile	/var/run/rsnapshot.pid

# Default rsync args. All rsync commands have at least these options set.
#
#rsync_short_args	-a
#rsync_long_args	--delete --numeric-ids --relative --delete-excluded

# ssh has no args passed by default, but you can specify some here.
#
#ssh_args	-p 22

# Default arguments for the "du" program (for disk space reporting).
# The GNU version of "du" is preferred. See the man page for more details.
# If your version of "du" doesn't support the -h flag, try -k flag instead.
#
#du_args	-csh

# If this is enabled, rsync won't span filesystem partitions within a
# backup point. This essentially passes the -x option to rsync.
# The default is 0 (off).
#
#one_fs		0

# The include and exclude parameters, if enabled, simply get passed directly
# to rsync. If you have multiple include/exclude patterns, put each one on a
# separate line. Please look up the --include and --exclude options in the
# rsync man page for more details on how to specify file name patterns.
#
#include	???
#include	???
#exclude	???
#exclude	???

# The include_file and exclude_file parameters, if enabled, simply get
# passed directly to rsync. Please look up the --include-from and
# --exclude-from options in the rsync man page for more details.
#
#include_file	/path/to/include/file
#exclude_file	/path/to/exclude/file

# If your version of rsync supports --link-dest, consider enable this.
# This is the best way to support special files (FIFOs, etc) cross-platform.
# The default is 0 (off).
#
link_dest	1

# When sync_first is enabled, it changes the default behaviour of rsnapshot.
# Normally, when rsnapshot is called with its lowest interval
# (i.e.: "rsnapshot hourly"), it will sync files AND rotate the lowest
# intervals. With sync_first enabled, "rsnapshot sync" handles the file sync,
# and all interval calls simply rotate files. See the man page for more
# details. The default is 0 (off).
#
#sync_first	0

# If enabled, rsnapshot will move the oldest directory for each interval
# to [interval_name].delete, then it will remove the lockfile and delete
# that directory just before it exits. The default is 0 (off).
#
#use_lazy_deletes	0

# Number of rsync re-tries. If you experience any network problems or
# network card issues that tend to cause ssh to crap-out with
# "Corrupted MAC on input" errors, for example, set this to a non-zero
# value to have the rsync operation re-tried
#
#rsync_numtries 0

###############################
### BACKUP POINTS / SCRIPTS ###
###############################

{% for backup in awstats_domains %}
# {{ backup }} backups
backup_script	/bin/date "+ backup started at %T-%F" >> lab_{{backup}}_log	start_logs/
#Backup script generates the dump, which the next backup directive copies to the server
backup_script	/usr/bin/ssh root@{{backup}} "cd /root/labs/*/src/scripts; chmod +x backup; ./backup"	unused1/
backup	root@{{backup}}:/root/labs/*/src/scripts/labbackup_*.tar	{{backup}}/
backup_script	/bin/date "+ backup ended at %T-%F" >> lab_{{backup}}_log	end_logs/
{% endfor %}


# LOCALHOST
#backup	/home/		localhost/
#backup	/etc/		localhost/
#backup	/usr/local/	localhost/
#backup	/var/log/rsnapshot		localhost/
#backup	/etc/passwd	localhost/
#backup	/home/foo/My Documents/		localhost/
#backup	/foo/bar/	localhost/	one_fs=1, rsync_short_args=-urltvpog
#backup_script	/usr/local/bin/backup_pgsql.sh	localhost/postgres/

# EXAMPLE.COM
#backup_script	/bin/date "+ backup of example.com started at %c"	unused1
#backup	root@example.com:/home/	example.com/	+rsync_long_args=--bwlimit=16,exclude=core
#backup	root@example.com:/etc/	example.com/	exclude=mtab,exclude=core
#backup_script	ssh root@example.com "mysqldump -A > /var/db/dump/mysql.sql"	unused2
#backup	root@example.com:/var/db/dump/	example.com/
#backup_script	/bin/date	"+ backup of example.com ended at %c"	unused9

# CVS.SOURCEFORGE.NET
#backup_script	/usr/local/bin/backup_rsnapshot_cvsroot.sh	rsnapshot.cvs.sourceforge.net/

# RSYNC.SAMBA.ORG
#backup	rsync://rsync.samba.org/rsyncftp/	rsync.samba.org/rsyncftp/

#+END_SRC
** Tasks

#+BEGIN_SRC yaml :tangle roles/lab_rsnapshot_server/tasks/main.yaml :eval no
---
- name: Installing rsnapshot
  yum: name=rsnapshot state=installed
  environment: proxy_env

- name: Applying iptables for rsnapshot
  template: src=rsnapshot_server_iptables dest=/etc/sysconfig/iptables owner=root group=root
  notify: restart iptables

#- name: Create a SSH key for 'root'
#  user: name=root generate_ssh_key=yes ssh_key_file=.ssh/id_rsa

#- name: Get public key from RSNAPSHOT server to ansible server
#  fetch: src=/root/.ssh/id_rsa.pub dest=./lab_rsnapshot_server_pubic_key

#updating rsnapshot.conf also includes configuring backup of remote machines
- name: updating rsnapshot.conf
  template: src=rsnapshot.conf.j2 dest=/etc/rsnapshot.conf owner=root group=root mode=644 backup=yes

- name: Configure cron
  cron: name="{{ item.name }}"
        user=root
        cron_file=ansible_rsnapshot
        month={{ item.month}}
        weekday={{ item.weekday}}
        day={{ item.day}}
        hour={{ item.hour}}
        minute={{ item.minute}}
        job="{{ item.job}}"
  with_items: lab_rsnapshot_crontab


#+END_SRC
** Handlers

#+BEGIN_SRC yml :tangle roles/lab_rsnapshot_server/handlers/main.yml :eval no
- name: restart iptables
  service: name=iptables state=restarted
#+END_SRC

** Variables definition

#+BEGIN_SRC yml :tangle roles/lab_rsnapshot_server/vars/main.yml :eval no
---
lab_rsnapshot_crontab:
     - name: hourly
       month: '*'
       weekday: '*'
       day: '*'
       hour: '*/4'
       minute: 0
       job: "/usr/bin/rsnapshot hourly"
     - name: daily
       month: '*'
       weekday: '*'
       day: '*'
       hour: 3
       minute: 30
       job: "/usr/bin/rsnapshot daily"
     - name: weekly
       month: '*'
       weekday: 1
       day: '*'
       hour: 3
       minute: 0
       job: "/usr/bin/rsnapshot weekly"
     - name: monthly
       month: '*'
       weekday: '*'
       day: 1
       hour: 2
       minute: 30
       job: "/usr/bin/rsnapshot monthly"
#+END_SRC
** Rsnapshot server configuration script
#+BEGIN_SRC yml :tangle lab_rsnapshot_server.yaml :eval no
---
- name: This yaml script configures lab rsnapshot server
  hosts: lab_rsnapshot_server
  remote_user: root

  vars:
   host_name: "lab_rsnapshot_server.{{prefix}}vlabs.ac.in"
  roles:
    - common
    - lab_rsnapshot_server
#+END_SRC
* Test cases
