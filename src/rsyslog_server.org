#+TITLE:     Rsyslog Server - Design Model and Implementation
#+DATE:      2015-03-18 Wednesday
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+DESCRIPTION: Rsyslog Server - Design and Documentation


* Introduction
- Rsyslog server is a central storage system of message logs. Rsyslog service is
  configured inside the systems to forward the log messages to the rsyslog
  server for safe storage. Rsyslog service also saves the system log messages
  locally in each system.

* Description

1) Rsyslog uses the standard BSD syslog protocol on UDP port 514.

2) Rsyslog is able to:
   - accepts input from a wide variety of sources.
   - transforms them
   - and output the results to diverse destinations.

3) Messages are passed to ruleset, where rules are conditionally applied. When a
   rule matches, the message is transferred to an actions such as write it to a
   file, database or forward it to a remote host.

4) Rulesets and Rules:: A rule is a way how rsyslog shall process a specific
   message.

5) All configuration directives need to be specified on a line by their own and
   must start with a dollar-sign.

* Requirements
** Functional Requirement
1) Allow incoming connections on udp port 514.
2) Allow incoming ssh connections on TCP port 22 from Ansible and Nagios.
3) Allow incoming connections on TCP port 5666 from Nagios.
4) Allow incoming connections on UDP port 161 and 162 from Cacti Server.
5) Allow incoming and outgoing ping requests to anywhere and from anywhere.
6) Allow outgoing connections on UDP port 1514 to Ossec server.
7) Allow outgoing connections on TCP port 80 and 443 for yum.
8) Allow outgoing connections on TCP port 25 for sending mails via logwatch.
9) Ansible machine ssh public key is to be added to authorized keys.
10) Rsyslog service has to run on udp port 514.
11) Log messages being forwarded by the various client systems are to be saved in
    a separate file for each client.

** Security Requirement
1) Accept ssh connection *only* from Ansible server.
2) Accept incoming connections on UDP port 161 and 162 *only* from Cacti Server.
3) Accept incoming connections on TCP port 5666 *only* from Nagios.
4) Accept outgoing connections on UDP port 1514 *only* to Ossec server.
5) Rate limiting on all the connections.

* Design
** System Design Diagram
[[./diagrams/rsyslog-design-diagram.png]]
**** Editable link [[https://docs.google.com/a/vlabs.ac.in/drawings/d/16iv5DYT3_zrf6mrxTF1F7K_XkE9wfZdpaDNbPpDx99A/edit][google drawing editable link]]

** System Files
|------+---------+------------------------------+----------------------|
| Sno. | Service | File                         | File Type            |
|------+---------+------------------------------+----------------------|
|   1. | rsyslog | /etc/rsyslog.conf            | System Configuration |
|------+---------+------------------------------+----------------------|
|   2. | rsyslog | /var/log/<client-hostname>/* | Log Data             |
|------+---------+------------------------------+----------------------|

* Provisioning
** Installed packages
- Latest stable version of rsyslog package is 8.8.0. The package used for this
  system is =rsyslog-5.8.10-10.el6_6.x86_64=.

** System Creation
- System is instantiated using following command:
#+BEGIN_EXAMPLE
vzctl create <rsyslog_ctid> --ostemplate centos-6-x86_64 --hostname rsyslog-server.virtual-labs.ac.in --ipadd <rsyslog_ip>
#+END_EXAMPLE

* Implementation
** Structure of Scripts
- The implementation of this system is in terms of a collection of Ansible
  scripts which configures the machine. These scripts are organized as follows:
     #+BEGIN_EXAMPLE
|-code
|   |-- rsyslog_server.yml
|   |-- roles
|   |   |-- rsyslog_server
|   |   |   |-- handlers
|   |   |   |   `--main.yml
|   |   |   |-- tasks
|   |   |   |   `--main.yml
|   |   |   |-- templates
|   |   |   |   `--iptables
|   |   |   |-- files
|   |   |   |   `--rsyslog_server.conf

#+END_EXAMPLE

** What are the firewall rules for rsyslog server
*** Default rules for filter table
- Default policy for input, forward and output is set to be as ACCEPT. If packet
  does not match any rule then the default action is applied to the packet.
  Packets counters are set to [0:0].  First counter represents the number of
  packets that matched the rule for the chain, and second counter represents the
  total size of the packets that matched the rule.
  
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#If packet does not match any rule then the default action is applied to the packet
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
#+END_SRC

*** Rule for INPUT loopback packets
- Allow internal communication between services running within the rsyslog
  server, over loopback interface. Destination ip is also specified to avoid any
  security breach.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow internal process to process communication over loopback interface
-A INPUT -i lo -d 127.0.0.0/8 -j ACCEPT
#+END_SRC
 
*** Rate limiting new connections
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Rate limit new connections to 20 new connections per 30 seconds
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --set
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --rcheck --seconds 30 --hitcount 20 -m limit --limit 2/min -j LOG --log-prefix "new_limit_"
-A INPUT ! -p udp -m state --state NEW -m recent --name ssh_limit --rcheck --seconds 30 --hitcount 20 -j DROP
#+END_SRC

*** Rule for incoming ping request with rate limiting
- Allow rsyslog server to accept incoming ping requests from anywhere.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to accept incoming ping requests from anywhere
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG 
-A INPUT -p icmp --icmp-type echo-request -j DROP
#+END_SRC

*** Rule for ongoing connection to other machine
- Allow rsyslog server to continue already related and established
  connections. Previous connection would have passed through the firewall and if
  they got established, connection is allowed to continue.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to continue already related and established connections
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
#+END_SRC

*** Rule for incoming ssh connection
- Allowing rsyslog server to accept incoming ssh TCP port 22 connections *only*
  from the ansible and nagios. For loop is used to enable rule for multiple
  management server and ansible server.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allowing incoming ssh connections only from the management ips. Hopefully fail2ban will take care of bruteforce attacks from management IPs
{% for item in management_ips  %}  
-A INPUT -m state --state NEW -s {{ item }} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allowing incoming ssh connections only from ansible server. Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in ansible_server_ips  %}
-A INPUT -m state --state NEW -s {{ item }} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#+END_SRC

*** Rule for incoming connection for rsyslog messages
- Allowing rsyslog server to accept incoming packets on udp port 514 from
  anywhere.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to accept incoming rsyslog messages from anywhere
-A INPUT -m state --state NEW -p udp -m udp --dport 514 -j ACCEPT
#+END_SRC

*** Rule for incoming NRPE query from Nagios server
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to accept incoming nrpe queries from nagios server
-A INPUT -m state --state NEW -p tcp -m tcp --dport 5666 -j ACCEPT
#+END_SRC

*** Rule for incoming SNMP queries from Cacti server
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to accept incoming snmp queries from cacti server
-A INPUT -p udp -m udp --dport 161 -j ACCEPT
-A INPUT -p udp -m udp --dport 162 -j ACCEPT
#+END_SRC

*** Rule for logging blocked incoming connection
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Log all other "blocked_input_" attempts with rate limiting
-A INPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_input_"
#+END_SRC
*** Rule for all other incoming packets
- Reject all the INPUT packets which does not match any of the defined
  rules. Also send a reply message to the host machine.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Drop all the INPUT packets which does not match any of the rules
-A INPUT -j REJECT --reject-with icmp-host-prohibited
#+END_SRC

*** Rule for FORWARD chain
- Rsyslog is not responsible for any packet forwarding and hence forwarding rule
  should be set to reject packets.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Do not allow any packet to be forwarded
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
#+END_SRC

*** Rule for OUTPUT loopback packets
- Allow internal communication between services running within the system, over
  loopback interface. Source ip is also specified to avoid any security breach.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow internal process to process communication over loopback interface
-A OUTPUT -s 127.0.0.0/8 -o lo -j ACCEPT
#+END_SRC

*** Rule for ongoing connection from other machine
- Allow rsyslog server to continue already related and established
  connections. Previous connection must have passed through the firewall and if
  they got established, connection is allowed to continue.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to continue already related and established connections
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
#+END_SRC

*** Rule for outgoing dns request
- Allow rsyslog server to make dns queries.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to make dns queries
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
#+END_SRC

*** Rule for sending mails by logwatch service
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to send mails by logwatch service
-A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT
#+END_SRC

*** Rule for outgoing web request by yum
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow yum to contact web servers for installing and updating packages
-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
#+END_SRC

*** Rule for outgoing connection to OSSEC server
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow outgoing connections to OSSEC server
-A OUTPUT -p udp -m udp --dport 1514 -j ACCEPT
#+END_SRC
    
*** Rule for outgoing ping request
- Allow rsyslog server to send ping requests to anywhere.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to send ping requests to anywhere.
-A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
#+END_SRC

*** Rule for logging blocked outgoing connection
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Log all other "blocked_output_" attempts
-A OUTPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_output_"
#+END_SRC
*** Rule for all other outgoing packets
- Reject all the OUTPUT packets which does not match any of the defined rules.
  Also send a reply message to the host machine.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Reject all the OUTPUT packets which does not match any of the rules
-A OUTPUT -j REJECT --reject-with icmp-host-prohibited
#+END_SRC

*** Enforce filter rules
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
COMMIT
#+END_SRC
    
** Build Configuration file
*** Steps to configure
- Rsyslog service is configured by =/etc/rsyslog.conf= configuration file.
  Default configuration setup is edited according to our requirement as follows:
**** Append following lines at the bottom of the file
     #+BEGIN_EXAMPLE
     $template TmplAuth, "/var/log/%HOSTNAME%/%PROGRAMNAME%.log"
     authpriv.*      ?TmplAuth
     *.info,mail.none,authpriv.none,cron.none   ?TmplAuth
     #+END_EXAMPLE
**** Uncomment following directives: 
     #+BEGIN_EXAMPLE
     $ModLoad imudp
     $UDPServerRun 514
     #+END_EXAMPLE

*** Complete configuration file
- Configuration file after making modifications is shown below
#+BEGIN_SRC yml :tangle roles/rsyslog_server/files/rsyslog_server.conf :eval no
# rsyslog v5 configuration file

# For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html
# If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html

#### MODULES ####

$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)
$ModLoad imklog   # provides kernel logging support (previously done by rklogd)
#$ModLoad immark  # provides --MARK-- message capability

# Provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 514

# Provides TCP syslog reception
#$ModLoad imtcp
#$InputTCPServerRun 514


#### GLOBAL DIRECTIVES ####

# Use default timestamp format
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# File syncing capability is disabled by default. This feature is usually not required,
# not useful and an extreme performance hit
#$ActionFileEnableSync on

# Include all config files in /etc/rsyslog.d/
$IncludeConfig /etc/rsyslog.d/*.conf


#### RULES ####

# Log all kernel messages to the console.
# Logging much else clutters up the screen.
#kern.*                                                 /dev/console

# Log anything (except mail) of level info or higher.
# Don't log private authentication messages!
*.info;mail.none;authpriv.none;cron.none                -/var/log/messages

# The authpriv file has restricted access.
authpriv.*                                              -/var/log/secure

# Log all the mail messages in one place.
mail.*                                                  -/var/log/maillog


# Log cron stuff
cron.*                                                  -/var/log/cron

# Everybody gets emergency messages
*.emerg                                                 *

# Save news errors of level crit and higher in a special file.
uucp,news.crit                                          -/var/log/spooler

# Save boot messages also to boot.log
local7.*                                                -/var/log/boot.log


# ### begin forwarding rule ###
# The statement between the begin ... end define a SINGLE forwarding
# rule. They belong together, do NOT split them. If you create multiple
# forwarding rules, duplicate the whole block!
# Remote Logging (we use TCP for reliable delivery)
#
# An on-disk queue is created for this action. If the remote host is
# down, messages are spooled to disk and sent when it is up again.
#$WorkDirectory /var/lib/rsyslog # where to place spool files
#$ActionQueueFileName fwdRule1 # unique name prefix for spool files
#$ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)
#$ActionQueueSaveOnShutdown on # save messages to disk on shutdown
#$ActionQueueType LinkedList   # run asynchronously
#$ActionResumeRetryCount -1    # infinite retries if host is down
# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
#*.* @@remote-host:514
# ### end of the forwarding rule ###
$template TmplAuth, "/var/log/%HOSTNAME%/%PROGRAMNAME%.log"

authpriv.*      ?TmplAuth
*.info,mail.none,authpriv.none,cron.none   ?TmplAuth

#+END_SRC

** Install rsyslog package
#+BEGIN_SRC yml :tangle roles/rsyslog_server/tasks/main.yml :eval no
---
 - name: Install rsyslog package
   yum: name=rsyslog state=present
   environment: proxy_env
#+END_SRC 

** Set Rsyslog service Version-1
- Rsyslog service is set by following steps:
   1) Copy configuration file from the ansible machine to the rsyslog server
      machine.
   2) Restart rsyslog service to enforce the configuration.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/tasks/main.yml
 - name: Copying rsyslog configuration files
   copy: src=rsyslog_server.conf dest=/etc/rsyslog.conf owner=root group=root mode=600
   notify:
     - restart rsyslog
#+END_SRC

** COMMENT Set Rsyslog service Version-2

#+BEGIN_SRC yml :tangle roles/rsyslog_server/tasks/main.yml
# - name: Editing /etc/rsyslog.conf file
#   lineinfile: "dest=/etc/rsyslog.conf" regexp=^$template line='$template TmplAuth, "/var/log/%HOSTNAME%/%PROGRAMNAME%.log"'
 
# - name: Editing /etc/rsyslog.conf file
#   lineinfile: "dest=/etc/rsyslog.conf" regexp=^authpriv line='authpriv.*      ?TmplAuth'

# - name: Editing /etc/rsyslog.conf file
#   lineinfile: "dest=/etc/rsyslog.conf" regexp=^*.info line='*.info,mail.none,authpriv.none,cron.none   ?TmplAuth'

# - name: Editing /etc/rsyslog.conf file to uncomment $ModLoad imdup
#   lineinfile: "dest=/etc/rsyslog.conf" regexp=^$ModLoad line='$ModLoad imudp'

#  - name: Editing /etc/rsyslog.conf file to uncomment $UDPServerRun 514
#    lineinfile: "dest=/etc/rsyslog.conf" regexp=^$UDPServerRun line='$UDPServerRun 514'
#+END_SRC

** Set firewall service
- Firewall rules are set by following steps:
   1) Copy iptables configuration file from the ansible machine to the rsyslog
      server machine.
   2) Restart iptables service to enforce the configuration.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/tasks/main.yml
 - name: Copy iptables configuration file
   template: src=iptables dest=/etc/sysconfig/iptables owner=root group=root mode=600
   notify:
     - restart iptables
#+END_SRC

** Set rsyslog service to auto start
#+BEGIN_SRC yml :tanlge roles/rsyslog_server/tasks/main.yml
 - name: Set rsyslog service for auto startup
   service: name=rsyslog state=started enabled=yes
#+END_SRC

** Start firewall service
- Any changes in iptables configuration file to update the firewall is enforced
  by restarting the iptables service.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/handlers/main.yml
---
 - name: Restart iptables
   service: name=iptables state=restarted
#+END_SRC

** Start rsyslog service
- Any changes in rsyslog configuration file will be enforced to the system by
  restarting the rsyslog service.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/handlers/main.yml
 - name: Restart rsyslog
   service: name=rsyslog state=restarted
#+END_SRC

** Variables Definition
- Variables are used by the ansible scripts to configure rsyslog server. Values
  of these variables is fetched from the "common_vars" role.
  1) Proxy environment
  2) Anisble server ip
#+BEGIN_SRC yaml :tangle roles/rsyslog_server/meta/main.yml
---
dependencies:
- role: common_vars
#+END_SRC

** Rsyslog Server Installation Script
- Rsyslog server is configured by using common and rsyslog_server role.
#+BEGIN_SRC yml :tangle rsyslog_server.yml
---
- name: Configure rsyslog server 
  hosts: rsyslog_server
  remote_user: root
  roles:
   - common
   - rsyslog_server
#+END_SRC

* COMMENT Thoughts
1) On rsyslogserver /var/log/secure contains same data as in
   /var/log/<rsyslog-client>/su.log.

* COMMENT Links
1. http://www.rsyslog.com/doc/v8-stable/configuration/index.html
2. http://www.slashroot.in/linux-kernel-rpfilter-settings-reverse-path-filtering

* Test Cases
