#+TITLE:     Rsyslog Server - Design Model and Implementation
#+DATE:      2015-03-18 Wednesday
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+DESCRIPTION: Rsyslog Server - Design and Documentation


* Introduction
- Rsyslog server is a central storage system of message logs. Rsyslog service is
  configured inside the systems to forward the log messages to the rsyslog
  server for safe storage. Rsyslog service also saves the system log messages
  locally in each system.

* Description

1) Rsyslog uses the standard BSD syslog protocol on UDP port 514.

2) Rsyslog is able to:
   - accepts input from a wide variety of sources.
   - transform them
   - and output the results to diverse destinations.

3) Messages are passed to ruleset, where rules are conditionally applied. When a
   rule matches, the message is transferred to an actions such as write it to a
   file, database or forward it to a remote host.

4) Rulesets and Rules:: A rule is a way how rsyslog shall process a specific
   message.

5) All configuration directives need to be specified on a line by their own and
   must start with a dollar-sign.

* Requirements
** Functional Requirements
1) Allow incoming connections on udp port 514.
2) Allow incoming ssh connections on TCP port 22 from configuration, Nagios and
   management servers.
3) Allow incoming connections on TCP port 5666 from Nagios.
4) Allow incoming connections on UDP port 161 and 162.
5) Allow incoming and outgoing ping requests to anywhere and from anywhere.
6) Allow outgoing connections on UDP port 1514.
7) Allow outgoing connections on TCP port 80 and 443 for yum.
8) Allow outgoing connections on TCP port 25 for sending mails via logwatch.
9) Add Configuration server's ssh public key to authorized keys.
10) Run Rsyslog service on udp port 514.
11) Save log messages forwarded by various client systems in a separate file for
    each client.

** Security Requirements
1) Accept ssh connections *only* from Configuration server, management servers
   and Nagios server.
2) Apply rate limit on all the connections.

* Design
** System Design Diagram
[[./diagrams/rsyslog-design-diagram.png]]
**** Editable link [[https://docs.google.com/a/vlabs.ac.in/drawings/d/16iv5DYT3_zrf6mrxTF1F7K_XkE9wfZdpaDNbPpDx99A/edit][google drawing editable link]]

** System Files
|------+----------+------------------------------+------------------------|
| Sno. | Service  | File                         | File Type              |
|------+----------+------------------------------+------------------------|
|   1. | rsyslog  | /etc/rsyslog.conf            | System Configuration   |
|------+----------+------------------------------+------------------------|
|   2. | rsyslog  | /var/log/<client-hostname>/* | Log Data               |
|------+----------+------------------------------+------------------------|
|   3. | IpTables | /etc/sysconfig/iptables      | Firewall Configuration |
|------+----------+------------------------------+------------------------|

* Provisioning
** Installed packages
- Latest stable version of rsyslog package is 8.8.0. The package installted on
  this system is =rsyslog-5.8.10-10.el6_6.x86_64=.

** System Creation
- System is instantiated using following command:
#+BEGIN_EXAMPLE
vzctl create <rsyslog_ctid> --ostemplate centos-6-x86_64 --hostname rsyslog-server.virtual-labs.ac.in --ipadd <rsyslog_ip>
#+END_EXAMPLE

* Implementation
** Structure of Scripts
- The implementation of this system is in terms of a collection of Ansible
  scripts which configures the machine. These scripts are organized as follows:
     #+BEGIN_EXAMPLE
|-code
|   |-- rsyslog_server.yml
|   |-- roles
|   |   |-- rsyslog_server
|   |   |   |-- handlers
|   |   |   |   `--main.yml
|   |   |   |-- tasks
|   |   |   |   `--main.yml
|   |   |   |-- templates
|   |   |   |   `--iptables
|   |   |   |-- files
|   |   |   |   `--rsyslog_server.conf

#+END_EXAMPLE

** What are the firewall rules for rsyslog server
- Firwall rules applied to rsyslog server are mentioned here. Description of
  firewall rules which are common across all the systems are defined in the
  common role. Rules [[Rule for incoming connection for rsyslog messages][1]] and [[Rule for FORWARD chain][2]] and are specific to only rsyslog server and are
  described here.
*** Common Firewall Rules - Section 1
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#If packet does not match any rule then the default action is applied to the packet
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

#Allow internal process to process communication over loopback interface
-A INPUT -i lo -d 127.0.0.0/8 -j ACCEPT

#Rate limit new connections to 20 new connections per 30 seconds
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --set
-A INPUT ! -p udp -m state --state NEW -m recent --name new_limit --rcheck --seconds 30 --hitcount 20 -m limit --limit 2/min -j LOG --log-prefix "new_limit_"
-A INPUT ! -p udp -m state --state NEW -m recent --name ssh_limit --rcheck --seconds 30 --hitcount 20 -j DROP

#Allow to accept incoming ping requests from anywhere
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT
-A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG 
-A INPUT -p icmp --icmp-type echo-request -j DROP

#Allow to continue already related and established connections
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

#Allowing SSH connection from nagios server ip.
-A INPUT -m state --state NEW -s {{ nagios_server_ip }} -p tcp -m tcp --dport 22 -j ACCEPT
#Allowing incoming ssh connections only from the management ips.
#Hopefully fail2ban will take care of bruteforce attacks from management IPs
{% for item in management_ips  %}  
-A INPUT -m state --state NEW -s {{ item }} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#Allowing incoming ssh connections only from ansible server. 
#Hopefully fail2ban will take care of bruteforce attacks from ansible server IPs
{% for item in ansible_server_ips  %}
-A INPUT -m state --state NEW -s {{ item }} -p tcp -m tcp --dport 22 -j ACCEPT
{% endfor %}
#+END_SRC
 
*** Rule for incoming connection for rsyslog messages
- Allow rsyslog server to accept incoming log messages on UDP port 514 from
  various systems.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to accept incoming rsyslog messages from anywhere
-A INPUT -m state --state NEW -p udp -m udp --dport 514 -j ACCEPT
#+END_SRC

*** Common Firewall Rules - Section 2
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow to accept incoming nrpe queries from nagios server
-A INPUT -m state --state NEW -p tcp -m tcp --dport 5666 -j ACCEPT

#Allow to accept incoming snmp queries from cacti server
-A INPUT -p udp -m udp --dport 161 -j ACCEPT
-A INPUT -p udp -m udp --dport 162 -j ACCEPT

#Log all other "blocked_input_" attempts with rate limiting
-A INPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_input_"

#Drop all the INPUT packets which does not match any of the rules
-A INPUT -j REJECT --reject-with icmp-host-prohibited
#+END_SRC

*** Rule for FORWARD chain
- Rsyslog is not responsible for any packet forwarding, hence forwarding rule
  should be set to reject policy.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Do not allow any packet to be forwarded
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
#+END_SRC

*** Common Firewall Rules - Section 3
#+BEGIN_SRC yml :tangle roles/rsyslog_server/templates/iptables :eval no
#Allow internal process to process communication over loopback interface
-A OUTPUT -s 127.0.0.0/8 -o lo -j ACCEPT

#Allow to continue already related and established connections
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

#Allow to make dns queries
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT

#Allow to send mails by logwatch service
-A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT

#Allow yum to contact web servers for installing and updating packages
-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT

#Allow outgoing connections to OSSEC server
-A OUTPUT -p udp -m udp --dport 1514 -j ACCEPT

#Allow to send ping requests to anywhere.
-A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT

#Log all other "blocked_output_" attempts
-A OUTPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_output_"

#Reject all the OUTPUT packets which does not match any of the rules
-A OUTPUT -j REJECT --reject-with icmp-host-prohibited

COMMIT
#+END_SRC
    
** Build Configuration file
*** Steps to configure
- Rsyslog service is configured using =/etc/rsyslog.conf= configuration file.
  Default configuration setup is edited as per our requirements.
**** Append following lines at the bottom of the file
     #+BEGIN_EXAMPLE
     $template TmplAuth, "/var/log/%HOSTNAME%/%PROGRAMNAME%.log"
     authpriv.*      ?TmplAuth
     *.info,mail.none,authpriv.none,cron.none   ?TmplAuth
     #+END_EXAMPLE
**** Uncomment following directives:
     #+BEGIN_EXAMPLE
     $ModLoad imudp
     $UDPServerRun 514
     #+END_EXAMPLE

*** Complete configuration file
- Configuration file with modifications is shown below:
#+BEGIN_SRC yml :tangle roles/rsyslog_server/files/rsyslog_server.conf :eval no
# rsyslog v5 configuration file

# For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html
# If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html

#### MODULES ####

$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)
$ModLoad imklog   # provides kernel logging support (previously done by rklogd)
#$ModLoad immark  # provides --MARK-- message capability

# Provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 514

# Provides TCP syslog reception
#$ModLoad imtcp
#$InputTCPServerRun 514


#### GLOBAL DIRECTIVES ####

# Use default timestamp format
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# File syncing capability is disabled by default. This feature is usually not required,
# not useful and an extreme performance hit
#$ActionFileEnableSync on

# Include all config files in /etc/rsyslog.d/
$IncludeConfig /etc/rsyslog.d/*.conf


#### RULES ####

# Log all kernel messages to the console.
# Logging much else clutters up the screen.
#kern.*                                                 /dev/console

# Log anything (except mail) of level info or higher.
# Don't log private authentication messages!
*.info;mail.none;authpriv.none;cron.none                -/var/log/messages

# The authpriv file has restricted access.
authpriv.*                                              -/var/log/secure

# Log all the mail messages in one place.
mail.*                                                  -/var/log/maillog


# Log cron stuff
cron.*                                                  -/var/log/cron

# Everybody gets emergency messages
*.emerg                                                 *

# Save news errors of level crit and higher in a special file.
uucp,news.crit                                          -/var/log/spooler

# Save boot messages also to boot.log
local7.*                                                -/var/log/boot.log


# ### begin forwarding rule ###
# The statement between the begin ... end define a SINGLE forwarding
# rule. They belong together, do NOT split them. If you create multiple
# forwarding rules, duplicate the whole block!
# Remote Logging (we use TCP for reliable delivery)
#
# An on-disk queue is created for this action. If the remote host is
# down, messages are spooled to disk and sent when it is up again.
#$WorkDirectory /var/lib/rsyslog # where to place spool files
#$ActionQueueFileName fwdRule1 # unique name prefix for spool files
#$ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)
#$ActionQueueSaveOnShutdown on # save messages to disk on shutdown
#$ActionQueueType LinkedList   # run asynchronously
#$ActionResumeRetryCount -1    # infinite retries if host is down
# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
#*.* @@remote-host:514
# ### end of the forwarding rule ###
$template TmplAuth, "/var/log/%HOSTNAME%/%PROGRAMNAME%.log"

authpriv.*      ?TmplAuth
*.info,mail.none,authpriv.none,cron.none   ?TmplAuth

#+END_SRC

** COMMENT Build Configuration file version-2 
*** Steps to configure
- Rsyslog service is configured using =/etc/rsyslog.conf= configuration file.
  Default configuration setup is edited as per our requirements.
**** Append following lines at the bottom of the file
     #+BEGIN_EXAMPLE
     $template TmplAuth, "/var/log/%HOSTNAME%/%PROGRAMNAME%.log"
     *.*      ?TmplAuth
     #+END_EXAMPLE
**** Uncomment following directives:
     #+BEGIN_EXAMPLE
     $ModLoad imudp
     $UDPServerRun 514
     #+END_EXAMPLE
**** Comment following rules
     #+BEGIN_EXAMPLE
     *.info;mail.none;authpriv.none;cron.none                -/var/log/messages
     authpriv.*                                              -/var/log/secure
     mail.*                                                  -/var/log/maillog
     cron.*                                                  -/var/log/cron
     *.emerg                                                 *
     uucp,news.crit                                          -/var/log/spooler
     local7.*                                                -/var/log/boot.log
     #+END_EXAMPLE
*** Complete configuration file
- Configuration file after making modifications is shown below

#+BEGIN_SRC yml :tangle roles/rsyslog_server/files/rsyslog_server_version2.conf :eval no
# rsyslog v5 configuration file

# For more information see /usr/share/doc/rsyslog-*/rsyslog_conf.html
# If you experience problems, see http://www.rsyslog.com/doc/troubleshoot.html

#### MODULES ####

$ModLoad imuxsock # provides support for local system logging (e.g. via logger command)
$ModLoad imklog   # provides kernel logging support (previously done by rklogd)
#$ModLoad immark  # provides --MARK-- message capability

# Provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 514

# Provides TCP syslog reception
#$ModLoad imtcp
#$InputTCPServerRun 514


#### GLOBAL DIRECTIVES ####

# Use default timestamp format
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# File syncing capability is disabled by default. This feature is usually not required,
# not useful and an extreme performance hit
#$ActionFileEnableSync on

# Include all config files in /etc/rsyslog.d/
$IncludeConfig /etc/rsyslog.d/*.conf


#### RULES ####

# Log all kernel messages to the console.
# Logging much else clutters up the screen.
#kern.*                                                 /dev/console

# Log anything (except mail) of level info or higher.
# Don't log private authentication messages!
#*.info;mail.none;authpriv.none;cron.none                -/var/log/messages

# The authpriv file has restricted access.
#authpriv.*                                              -/var/log/secure

# Log all the mail messages in one place.
#mail.*                                                  -/var/log/maillog


# Log cron stuff
#cron.*                                                  -/var/log/cron

# Everybody gets emergency messages
#*.emerg                                                 *

# Save news errors of level crit and higher in a special file.
#uucp,news.crit                                          -/var/log/spooler

# Save boot messages also to boot.log
#local7.*                                                -/var/log/boot.log


# ### begin forwarding rule ###
# The statement between the begin ... end define a SINGLE forwarding
# rule. They belong together, do NOT split them. If you create multiple
# forwarding rules, duplicate the whole block!
# Remote Logging (we use TCP for reliable delivery)
#
# An on-disk queue is created for this action. If the remote host is
# down, messages are spooled to disk and sent when it is up again.
#$WorkDirectory /var/lib/rsyslog # where to place spool files
#$ActionQueueFileName fwdRule1 # unique name prefix for spool files
#$ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)
#$ActionQueueSaveOnShutdown on # save messages to disk on shutdown
#$ActionQueueType LinkedList   # run asynchronously
#$ActionResumeRetryCount -1    # infinite retries if host is down
# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
#*.* @@remote-host:514
# ### end of the forwarding rule ###
$template TmplAuth, "/var/log/%HOSTNAME%/%PROGRAMNAME%.log"

*.*      ?TmplAuth
#+END_SRC

** Install rsyslog package
- Rsyslog package is installed in the system.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/tasks/main.yml :eval no
---
 - name: Install rsyslog package
   yum: name=rsyslog state=present
   environment: proxy_env
#+END_SRC 

** Set Rsyslog service Version-1
- Rsyslog service is set by following steps:
   1) Copy configuration file from the ansible machine to the rsyslog server
      machine.
   2) Restart rsyslog service to enforce the configuration.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/tasks/main.yml
 - name: Copying rsyslog configuration files
   copy: src=rsyslog_server.conf dest=/etc/rsyslog.conf owner=root group=root mode=600
   notify:
     - restart rsyslog
#+END_SRC

** COMMENT Set Rsyslog service Version-2

#+BEGIN_SRC yml :tangle roles/rsyslog_server/tasks/main.yml
# - name: Editing /etc/rsyslog.conf file
#   lineinfile: "dest=/etc/rsyslog.conf" regexp=^$template line='$template TmplAuth, "/var/log/%HOSTNAME%/%PROGRAMNAME%.log"'
 
# - name: Editing /etc/rsyslog.conf file
#   lineinfile: "dest=/etc/rsyslog.conf" regexp=^authpriv line='authpriv.*      ?TmplAuth'

# - name: Editing /etc/rsyslog.conf file
#   lineinfile: "dest=/etc/rsyslog.conf" regexp=^*.info line='*.info,mail.none,authpriv.none,cron.none   ?TmplAuth'

# - name: Editing /etc/rsyslog.conf file to uncomment $ModLoad imdup
#   lineinfile: "dest=/etc/rsyslog.conf" regexp=^$ModLoad line='$ModLoad imudp'

#  - name: Editing /etc/rsyslog.conf file to uncomment $UDPServerRun 514
#    lineinfile: "dest=/etc/rsyslog.conf" regexp=^$UDPServerRun line='$UDPServerRun 514'
#+END_SRC

** Set firewall service
- Firewall rules are set by following steps:
   1) Copy iptables configuration file from the ansible machine to the rsyslog
      server machine.
   2) Restart iptables service to enforce the configuration.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/tasks/main.yml
 - name: Copy iptables configuration file
   template: src=iptables dest=/etc/sysconfig/iptables owner=root group=root mode=600
   notify:
     - restart iptables
#+END_SRC

** Set rsyslog service to auto start
#+BEGIN_SRC yml :tanlge roles/rsyslog_server/tasks/main.yml
 - name: Set rsyslog service for auto startup
   service: name=rsyslog state=started enabled=yes
#+END_SRC

** Start firewall service
- Any changes in iptables configuration file to update the firewall is enforced
  by restarting the iptables service.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/handlers/main.yml
---
 - name: Restart iptables
   service: name=iptables state=restarted
#+END_SRC

** Start rsyslog service
- Any changes in rsyslog configuration file is enforced to the system by
  restarting the rsyslog service.
#+BEGIN_SRC yml :tangle roles/rsyslog_server/handlers/main.yml
 - name: Restart rsyslog
   service: name=rsyslog state=restarted
#+END_SRC

** Variables Definition
- Variables are used in the ansible scripts to configure rsyslog server. 
   1) Proxy environment
   2) Anisble server ip
 Values of these variables is fetched from the =common_vars= role.
#+BEGIN_SRC yaml :tangle roles/rsyslog_server/meta/main.yml
---
dependencies:
- role: common_vars
#+END_SRC

** Rsyslog Server Installation Script
- Rsyslog server is configured using common and =rsyslog_server= role.
#+BEGIN_SRC yml :tangle rsyslog_server.yml
---
- name: Configure rsyslog server 
  hosts: rsyslog_server
  remote_user: root
  roles:
   - common
   - rsyslog_server
#+END_SRC

* Test Cases
** Test Case-1
*** Objective: 
- Test the system to accept incoming connections on port UDP 514
*** Apparatus:
1) Rsyslog server
2) Rsyslog client

*** Theory
- Rsyslog server accepts log messages from rsyslog clients on UDP port 514. For
  machine to be configured as rsyslog server firewall rule of the machine has to
  allow incoming connections on port 514.

*** Experiment
- Login to rsyslog server from one terminal and navigate to
  =/var/log/<clienthostname>= directory. Do "tail -f su.log" in the present
  working directory. Now from another terminal login to rsyslog client
  machine. Execute "sudo su -" command. Once login to the client machine a
  session gets created for the user and a system log is generated. The log
  message are forwareded to rsyslog server and saved there in a file. As a
  result messages should appear in the first terminal screen.

*** Result
- Sample output is shown below for above procedure.
#+BEGIN_EXAMPLE
Mar 27 09:33:38 rsyslog-client su: pam_unix(su-l:session): session opened for user root by (uid=0)
Mar 27 09:33:43 rsyslog-client su: pam_unix(su-l:session): session closed for user root
#+END_EXAMPLE

*** Obeservation
- Messages are getting logged in the server in =su.log= file inside
  =/var/log/<client-hostname>= directory with proper date and time.

*** Conclusion
- If the messages are getting logged in =su.log= file inside
  =/var/log/<client-hostname>= directory with proper date and time that means rsyslog
  server is configured properly.

** Test Case-2
*** Objective:
- Test ssh logs are getting logged in rsyslog server

*** Apparatus:
1) Rsyslog server
2) Rsyslog client

*** Theory
- System generates log message everytime an event occurs in the system. When a
  login is made inside the system using ssh, machine generates "ssh log"
  message. This message is then forwarded to rsyslog server.

*** Experiment
- Login to rsyslog server from one terminal and naviagate to
  =/var/log/<client-hostname>= directory. Monitor =sshd.log= file using =tail -f
  sshd.log= command. Now from another terminal login to rsyslog client machine
  via ssh. The ssh log message is generated which is then forwarded to rsyslog
  server and saved in a file. As a result messages should appear in the first
  terminal screen.

*** Result
- Sample output is shown below for above chain of commands.
#+BEGIN_EXAMPLE
Mar 27 09:51:18 rsyslog-client sshd[3565]: Accepted password for root from 192.168.101.106 port 35795 ssh2
Mar 27 09:51:18 rsyslog-client sshd[3565]: pam_unix(sshd:session): session opened for user root by (uid=0)
#+END_EXAMPLE

*** Obeservation
- Messages are getting logged in the server in =sshd.log= file inside
  =/var/log/<client-hostname>= directory with proper date and time.

*** Conclusion
- If the messages are getting logged in =sshd.log= file inside
  =/var/log/<client-hostname>= directory with proper date and time that means rsyslog
  server is configured properly.
** Test Case-3
*** Objective:
- Test apache logs are getting logged in rsyslog server.

*** Apparatus:
1) Rsyslog server
2) Rsyslog client with apache service running

*** Theory
- Apache saves a log message everytime an an HTTP request is made to apache
  server.  By default apache saves log messages in =/var/log/httpd/access_log=
  file. These logs are forwarded to a central rsyslog server.  Apache is
  configured to pipes the log messages to external program by changing the value
  of "CustomLog" directive as follows:
   #+BEGIN_EXAMPLE
   CustomLog "|/usr/bin/logger -t apache -p local6.info" combined
   #+END_EXAMPLE

*** Experiment
- Make an http reqeust to rsyslog client using "lynx" program. HTTP service
  running at the client machine will send a reply.
  #+BEGIN_EXAMPLE
  lynx <rsyslog-client-ip>
  #+END_EXAMPLE
  After receiving the reply view the file at rsyslog server at
  =/var/log/<rsyslog-client>/apache.log= location. Log message similar to shown
  here should appear.
  #+BEGIN_EXAMPLE
  Mar 27 14:46:55 rsyslog-client apache: 192.168.101.106 - -
  [27/Mar/2015:14:46:55 +0530] "GET / HTTP/1.0" 200 10 "-" "Lynx/2.8.6rel.5
  libwww-FM/2.14 SSL-MM/1.4.1 OpenSSL/1.0.0-fips"\
  #+END_EXAMPLE

*** Result
- Apache logs are getting saved at the central server using rsyslog service.

*** Obeservation
- Messages are getting logged in the server in =apache.log= file inside
  =/var/log/<client-hostname>= directory with proper date and time.

*** Conclusion
- If the messages are getting logged in =apache.log= file inside
  =/var/log/<client-hostname>= directory with proper date and time that means
  rsyslog server is configured properly.
