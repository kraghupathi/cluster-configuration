#+Title: Common Roles
#+Author:Zubair S and Prakash B H
#+Date: 10 March 2015
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org


* Introduction:
This document describes the requirements, design and implementation of
the common roles which is part of the cluster. A role is a specific
set of configurations. Common Roles are the roles which will be
applied on all the deployed servers.

* Requirements

The functional requirements for common roles are:

** Functional Requirements

  1. Below common roles are applied at periodic intervals:
    + Restarting the IP tables
    + Installing and configuring the logwatch
    + Disabling password-based ssh
    + Installing and configuring fail2ban for ssh
    + Updating / patching the OS
    + Logging / Modfying the history behavior

The security best practices needs to be followed in defining the
roles. All processes suggested for =hardening a server= should be
implemented. A good documentation can be found here: [[http://www.serverhardening.com/][Server Hardening]].


* Design:    
Common Roles Diagram
#+CAPTION:  Common Roles Diagram
#+LABEL:  fig-common-diagram
#+NAME: fig-common-diagram

[[./diagrams/common-roles.png]]

Common roles will ensure that all the common roles will be applied on
all the deployed servers, including the ansible.

The diagram can be edited [[https://docs.google.com/a/vlabs.ac.in/drawings/d/1NHBwOSxikqlg5cXbgnKMfnUS_K_iMGkCClktXMOBTw8/edit][HERE]] 


* Implementation:
** Structure of the scripts
The implementation of this system is in terms of a collection of
Ansible scripts that configure the machine.  These scripts need to be
organized in a certain way:

#+BEGIN_EXAMPLE
|-- ansible.yml
|-- roles
|   |-- ansible
|   |   |...
|   |   |...
|   |-- common
|   |   |-- files
|   |   |    |-- logwatch.conf
|   |   |    |-- jail.local
|   |   |    |-- history.sh
|   |   |    `-- sshd-config
|   |   |-- handlers
|   |   |    `-- main.yml
|   |   |-- meta
|   |   |   `-- main.yml
|   |   |-- tasks
|   |   |   |-- aliases.yml
|   |   |   |-- history-config.yml
|   |   |   |-- restart-iptables.yml
|   |   |   |-- logwatch.yml
|   |   |   |-- main.yml
|   |   |   |-- fail2ban.yml
|   |   |   |-- sshd-config.yml
|   |   |   `-- update-os.yml
|   |   |-- templates
|   |   `-- vars
#+END_EXAMPLE

*** History
History parameters will be exported for the following:
 - HISTTIMEFORMAT :: display the time stamp along with the command
                     history
 - HISTSIZE       :: is the number of lines or commands that are stored in
                     memory in a history list while bash session is
                     ongoing
 - HISTFILESIZE   :: is the number of lines or commands that are allowed
                     in the history file at startup time of a session,
                     and are stored in the history file at the end of
                     bash session for use in future sessions.

#+BEGIN_SRC SHELL :tangle roles/common/files/history.sh
#!/bin/bash
HISTTIMEFORMAT  = "%y %m %d %T"
HISTSIZE        = 100000
HISTFILESIZE    = 100000
export HISTTIMEFORMAT HISTSIZE HISTFILESIZE
#+END_SRC 

*** SSHD config file
This file sets up the sshd configurations
#+BEGIN_SRC SHELL :tangle roles/common/files/sshd-config

#+END_SRC 


*** Logwatch config file
This file sets up the logwatch configurations
#+BEGIN_SRC SHELL :tangle roles/common/files/logwatch.conf

#+END_SRC 


*** Calling the SSHD Configuration
This file copies the modified sshd configuration and restarts using
the handler.

#+BEGIN_SRC YAML :tangle roles/common/tasks/sshd-config.yml
#Role to copy the modified sshd_config and call ssh restart handler

#+END_SRC


*** Configuring the logwatch
This file installs the logwatch  and copies the configuration

#+BEGIN_SRC YAML :tangle roles/common/tasks/logwatch.yml
#install and copy logwatch configuration
---
 - name: install logwatch
   yum: name=logwatch state=present
   environment: proxy_env

 - name: copy logwatch.conf
   copy: src=logwatch.conf dest=/etc/logwatch/conf/logwatch.conf owner=root group=root mode=0644
#+END_SRC

*** Fail2ban
Fail2ban scans log files and bans IPs that show the malicious signs of
agents seeking for exploits. It comes with filters for various
services like ssh, apache, mysql etc. Fail2Ban can be used to update
firewall rules to reject the IP addresses for a specified amount of
time. Even other services like sending mails, alerts can be
configured.

*Python* is the pre-requisite package to be installed to run Fail2ban
service. More details can be found in the [[http://www.fail2ban.org/wiki/index.php/Main_Page][WIKI]] page of Fail2ban. 

The objective is to install Fail2ban on all the servers and apply the
local rules.
#+BEGIN_SRC YAML :tangle roles/common/tasks/fail2ban.yml
---
tasks:
   - name: install fail2ban package
     apt: pkg=fail2ban state=present
     when: ansible_distribution=='Debian' or ansible_distribution=='Ubuntu'
     sudo: yes
   
   - name: copy fail2ban local config
     file: src=jail.local dest=/etc/fail2ban/jail.local owner=root group=root  mode=0644
     sudo: yes 
#+END_SRC

The configuration file =jail.local= applies the required rules on all
the servers.

*** Configuring the Fail2ban local file
The Fail2ban local configuration file called =jail.local= has all the
common rules which will be applied through Fail2ban.
#+BEGIN_SRC SHELL :tangle roles/common/files/logwatch.conf

#+END_SRC 
