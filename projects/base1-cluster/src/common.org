#+Title: Common Roles
#+Date: 10 March 2015
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org

* Introduction
This document describes the requirements, design and implementation of
the common roles which is part of the cluster. A role is a specific
set of configurations. Common Roles are the roles which will be
applied on all the deployed servers.

* Requirements

The functional requirements for common roles are:

|------------------+--------------------+-------------------------------|
| *Requirement ID* | *Requirement*      | *Descritpion*                 |
|------------------+--------------------+-------------------------------|
| reqC-1.1         | Log file           | Summary of log files          |
|                  | summary            | is mailed on daily            |
|                  |                    | basis                         |
|------------------+--------------------+-------------------------------|
| reqC-1.2         | Securing the       | System is secured by not      |
|                  | systems            | allowing the password         |
|                  |                    | based access                  |
|------------------+--------------------+-------------------------------|
| reqC-1.3         | Auditing the       | Provision is made to          |
|                  | servers            | audit all the commands run    |
|                  |                    | on servers                    |
|------------------+--------------------+-------------------------------|
| reqC-1.4         | Blocking malicious | Suspected malicious attackers |
|                  | attacks            | IP is captured and banned     |
|------------------+--------------------+-------------------------------|

*Note:* the convention followed in naming the requirement is: 
   + abbreviation for requirement: req
   + state that they belong to commons: C
   + identity number: starting from 1.1

The security best practices is to followed in defining the
functionalities. Processes suggested for =hardening a server= is
implemented. A good documentation on hardening a server can be found
here: [[http://www.serverhardening.com/][Server Hardening]].

* Design    
Common roles will ensure that the functionalities will be applied on
all the deployed servers.

* Implementation
The mentioned requirements are addressed and implemented the following
way:

|------------------+--------------------+---------------------------------|
| *Requirement ID* | *Requirement*      | *Implementation*                |
|------------------+--------------------+---------------------------------|
| reqC-1.1         | Log file           | Log file summary is obtained    |
|                  | summary            | by installing and configuring   |
|                  |                    | the tool - *logwatch*           |
|------------------+--------------------+---------------------------------|
| reqC-1.2         | Securing the       | The system is secured by        |
|                  | systems            | allowing only the ssh based     |
|                  |                    | acces. *sshd-config* file is    |
|                  |                    | disabled for password based     |
|                  |                    | access.                         |
|------------------+--------------------+---------------------------------|
| reqC-1.3         | Auditing the       | The commands run on the servers |
|                  | servers            | is logged along with the time   |
|                  |                    | stamp. The history settings is  |
|                  |                    | configured to log the commands. |
|------------------+--------------------+---------------------------------|
| reqC-1.4         | Blocking malicious | Suspicious attackers IP is      |
|                  | attacks            | captured and blocked using      |
|                  |                    | using the tool - *fail2ban*.    |
|------------------+--------------------+---------------------------------|
  
** Structure of the scripts
The implementation of this system is in terms of a collection of
ansible scripts that configure the machine.  These scripts are
organized in following way:

#+BEGIN_EXAMPLE
|-- ansible.yml
|-- roles
|   |-- ansible
|   |   |...
|   |   |...
|   |-- common
|   |   |-- files
|   |   |    |-- jail.local
|   |   |    `-- history.sh
|   |   |-- handlers
|   |   |    `-- main.yml
|   |   |-- meta
|   |   |   `-- main.yml
|   |   |-- tasks
|   |   |   |-- history_config.yml
|   |   |   |-- common_pkg.yml
|   |   |   |-- logwatch.yml
|   |   |   |-- sendmail_configure.yml
|   |   |   |-- main.yml
|   |   |   |-- fail2ban.yml
|   |   |   `-- sshd_config.yml
#+END_EXAMPLE

*** Log file summary
Servers and applications generally create "log files" to keep track of
activities taking place at any given time. Understanding the log files
is of vital importance to know the past events and analyzing them to
provide quick solutions, if needed any. *logwatch* is one of such
available tool to capture and analyze the log file summary. The
logwatch project page can be found [[http://sourceforge.net/projects/logwatch/][HERE]].

The list of tasks to be carried out are:
   + Installing the logwatch
   + copying the configuration file
   + setting up the mail server to mail the summary
   + setting the detail to log to medium   

#+BEGIN_SRC yaml :tangle roles/common/tasks/logwatch.yml
---
#install and copy logwatch configuration

 - name: install logwatch
   yum: name=logwatch state=present
   environment: proxy_env

 - name: copy logwatch.conf from default directory /etc/
   command: /bin/cp -p /usr/share/logwatch/default.conf/logwatch.conf /etc/logwatch/conf/logwatch.conf

 - name: changing the mail to in logwatch.conf, ensure proper owner,group, mode
   lineinfile: dest=/etc/logwatch/conf/logwatch.conf state=present regexp='^MailTo =' line='MailTo = alerts@vlabs.ac.in' owner=root group=root mode=0644

 - name: change the level of detail to medium
   lineinfile: dest=/etc/logwatch/conf/logwatch.conf state=present regexp='^Detail =' line='Detail = Med'
#+END_SRC



*** History
what, what who?
History parameters will be exported for the following:
 - HISTTIMEFORMAT :: display the time stamp along with the command
                     history
 - HISTSIZE       :: is the number of lines or commands that are stored in
                     memory in a history list while bash session is
                     ongoing
 - HISTFILESIZE   :: is the number of lines or commands that are allowed
                     in the history file at startup time of a session,
                     and are stored in the history file at the end of
                     bash session for use in future sessions.

#+BEGIN_SRC shell :tangle roles/common/files/history.sh
#!/bin/bash
HISTTIMEFORMAT  = "%y %m %d %T"
HISTSIZE        = 100000
HISTFILESIZE    = 100000
export HISTTIMEFORMAT HISTSIZE HISTFILESIZE
#+END_SRC 

*** Configuring the Fail2ban local file
The Fail2ban local configuration file called =jail.local= has all the
common rules which will be applied through Fail2ban.
#+BEGIN_SRC shell :tangle roles/common/files/jail.local

#+END_SRC 

*** Main file for Handlers
describe the structure. 
The main file in handlers restarts all the services to update the
changes made to the services. 

here is a handler which restarts the services. Read about handlers. 

#+BEGIN_SRC yaml :tangle roles/common/handlers/main.yml
---

  - name: restart iptables
    service: name=iptables state=restarted

  - name: restart sshd
    service: name=sshd state=restarted
  
  - name: restart sendmail
    service: name=sendmail state=restarted

  - name: restart fail2ban
    service: name=fail2ban state=restarted
#+END_SRC

*** Main file for meta
Explain about meta.
Main file includes the common vaiables defined in =common_vars=.
#+BEGIN_SRC yaml :tangle roles/common/meta/main.yml
---
dependencies:
  - role: common_vars
#+END_SRC

*** History Logs
This file calls the =history.sh= and configures the history log for
the commands run everyday.
#+BEGIN_SRC yaml :tangle roles/common/tasks/history_config.yml
---
#This play copies a stock history file
 - name: copying history
   copy: src=history.sh dest=/etc/profile.d/history.sh owner=root group=root mode=0655
#+END_SRC 

*** Common Packages
This file installs the common packages (bind utils) required by admins
to troubleshoot the issues
#+BEGIN_SRC yaml :tangle roles/common/tasks/common_pkg.yml
---
#this play installs the common packages needed by admins to troubleshoot issues
 - name: install bind-utils
   yum: name=bind-utils state=present
   environment:
    proxy_env
#+END_SRC 

*** Configuring the Mail Records
#+BEGIN_SRC yaml :tangle roles/common/tasks/sendmail_configure.yml
---
#This play configures smart hosts

 - name: Change the smart host entry in /etc/mail/sendmail.mc
   lineinfile: dest=/etc/mail/sendmail.mc regexp="SMART_HOST" line="define(`SMART_HOST', `{{iiit_mail_server}}')dnl"  state=present mode=0644
   
   notify: 
     - restart sendmail
#+END_SRC

*** Main file under tasks
#+BEGIN_SRC yaml :tangle roles/common/tasks/main.yml
---
 - name: sshd_config
   include: sshd_config.yml

 - name: history file
   include: history_config.yml

 - name: logwatch install
   include: logwatch.yml

 - name: sendmail configure
   include: sendmail_configure.yml

 - name: install common packages
   include: common_pkg.yml
#+END_SRC

*** Fail2ban
Fail2ban scans log files and bans IPs that show the malicious signs of
agents seeking for exploits. It comes with filters for various
services like ssh, apache, mysql etc. Fail2Ban can be used to update
firewall rules to reject the IP addresses for a specified amount of
time. Even other services like sending mails, alerts can be
configured.

*Python* is the pre-requisite package to be installed to run Fail2ban
service. More details can be found in the [[http://www.fail2ban.org/wiki/index.php/Main_Page][WIKI]] page of Fail2ban. 

The objective is to install Fail2ban on all the servers and apply the
local rules.
#+BEGIN_SRC yaml :tangle roles/common/tasks/fail2ban.yml
---
tasks:
   - name: install fail2ban package
     apt: pkg=fail2ban state=present
     when: ansible_distribution=='Debian' or ansible_distribution=='Ubuntu'
     sudo: yes
   
   - name: copy fail2ban local config
     file: src=jail.local dest=/etc/fail2ban/jail.local owner=root group=root  mode=0644
     sudo: yes 
#+END_SRC

The configuration file =jail.local= applies the required rules on all
the servers.

*** Calling the SSHD Configuration
This file copies the modified sshd configuration and restarts using
the handler.

rework on the word call to  realize.



#+BEGIN_SRC yaml :tangle roles/common/tasks/sshd_config.yml

#Modify  sshd_config and call ssh restart handler

# - name: copy sshd_config
#   copy: src=sshd_config dest=/etc/ssh/sshd_config owner=root group=root mode=0644

 - name: Permit root login without-pasword(key based)
   lineinfile: dest=/etc/ssh/sshd_config regexp='PermitRootLogin ' line='PermitRootLogin without-password' state=present

 - name: Disable Password authentication
   lineinfile: dest=/etc/ssh/sshd_config regexp='PasswordAuthentication ' line='PasswordAuthentication no'

 - name: Enable Public key authentication
   lineinfile: dest=/etc/ssh/sshd_config regexp='PubkeyAuthentication ' line='PubkeyAuthentication yes'

 - name: Do not permit empty password, also ensure proper owner, group and permissions
   lineinfile: dest=/etc/ssh/sshd_config regexp='PermitEmptyPasswords ' line='PermitEmptyPasswords no' mode=0600 owner=root group=root

#Call handler to restart sshd
   notify:
     - restart sshd

#+END_SRC
       
