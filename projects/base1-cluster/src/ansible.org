#+TITLE:  Ansible
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+options: ^:nil

* Introduction

This document describes the requirements, design and implementation of
the ansible server which is part of the cluster.

This server configures all other servers in the cluster.
Using Ansible, a machine is configured using multiple roles.  A role
is a specific set of configurations.

* Requirements
The functional and security requirements for Ansible server are:
** Functional Requirements 
   <<requirement>>
  1. Ansible server manages itself as well as others listed below:
     + At regular intervals, it applies firewall rules.
     + At regular intervals, it updates the packages of the OS and other
       software.

  2. Ansible server has only one `ansible` user and it has sudo permissions to
     run all commands.

  3. Only authorized VLEAD users can log-in as ansible user.
     Copy the VLEAD authorized_keys file to the Ansible server, under the ansible user.

** Security Requirements
   1. Apply Firewall Rules.
   2. SSH/Port 22 accessible *ONLY* from VLEAD IP range.
   3. Allow ICMP (Ping)
   4. Limit rate of new connections on port 22.
   5. Disable root login via ssh.

* Design
  
Ansible server
[[https://docs.google.com/a/vlabs.ac.in/drawings/d/1KRicWtnWvtqb06uNl5hYipeAH5KDQywWy7aOVStVAmo/edit?usp=sharing][Edit Image]]

#+CAPTION:  Ansible Design Diagram
#+LABEL:  fig-ansible-diagram
#+NAME: fig-ansible-diagram

[[./diagrams/ansible.png]]


The design of the firewall rules ensures that this server is
accessible only via port 22. All other ports are disabled. Moreover, port 22
is accessible only from VLEAD IP range.  Only key-based login to this
server is allowed.

This server can be reached via ICMP (ping) requests.

* Implementation
** Structure of the scripts
The implementation of this system is in terms of a collection of Ansible scripts that
configures the machine. Scripts are organized as follows:

#+BEGIN_EXAMPLE

|-- ansible.yml
|-- roles
|   |-- ansible
|   |   |-- handlers
|   |   |   `-- main.yml
|   |   |-- meta
|   |   |   `-- main.yml
|   |   |-- tasks
|   |   |   |-- main.yml
|   |   `-- templates
|   |       `-- iptables
|   |-- common
|   |   ...
#+END_EXAMPLE

** Hardening, OS Updates etc.
   Common role takes care of  [[Requirement]]. More
   information is [[./common.org][here]].

** Building the firewall rules

*** The default rules for filter table
    Default policy for input, forward and output is set as ACCEPT. If
    packet does not match any rule then this default action is applied
    to the packet.  Packet counters are set to [0:0].  First counter
    represents the number of packets that matched the rule for the
    chain, and second counter represents the total size of the packets
    that matched the rule.
    #+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables
     *filter
     :INPUT ACCEPT [0:0]
     :FORWARD ACCEPT [0:0]
     :OUTPUT ACCEPT [0:0]
    #+END_SRC


*** Rule for INPUT loopback packets
    Allow internal communication between services running within the
    ansible, over loopback interface. Input interface is also
    specified to avoid any security breach. The ansible server needs
    to accept all connections from loop back.

    #+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables
     -A INPUT -i lo -j ACCEPT
    #+END_SRC


*** Rule for ongoing connection from other machine 
    Allow ansible to continue already related and established
    connections. If a previous connection was passed and established
    through the firewall, it is allowed to continue.


    #+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables
     -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
    #+END_SRC

*** Rule for incoming SSH connection

    The base1-cluster is on IIIT-H's local network
    (10.0.0.0/8).  The ansible server is accessible 
    via ssh (port 22) *only* from the IIIT-H local network. 


    #+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables
     -A INPUT -p tcp -m tcp --dport 22 -s 10.0.0.0/8 -j ACCEPT
    #+END_SRC

*** ICMP Rule
    The server accepts ping requests(ICMP) from anywhere

    #+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables
     -A INPUT -p icmp -m icmp --icmp-type echo-request -j ACCEPT
    #+END_SRC
    
*** All other packets should be rejected
    The incoming and outgoing packets on all other ports are rejected.

    #+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables :eval no
     -A INPUT -j REJECT
     -A FORWARD -j REJECT
     COMMIT
    #+END_SRC


** Copy and apply the firewall rules for the Ansible server
- Firewall rules are set by following steps:
     1) Setting up ansible server for the first time, iptables
        configuration file is copied to the ansible machine.
     2) Restart iptables service to enforce the configuration.

#+BEGIN_SRC yaml :tangle roles/ansible/tasks/main.yml
---
  - name: Copy iptables configuration file for ansible server
    template: src=iptables dest=/etc/sysconfig/iptables mode=600 owner=root group=root
    notify: restart iptables
#+END_SRC


** Disable root login via ssh

   Ansible role ensures that root login is enabled on all
   machines but only via public key authentication. But for the
   Ansible server we want to disable root login altogether via ssh.

   Hence, we modify the =sshd_config= file to disable root login.
   We assume =PermitRootLogin= parameter is already set to some value.

   #+BEGIN_SRC yaml :tangle roles/ansible/tasks/main.yml :eval no

     - name: Disable root login via ssh
       lineinfile: dest=/etc/sshd_config regexp="^PermitRootLogin .*" state=present line="PermitRootLogin no"
   #+END_SRC

** Dependencies
   All the variables go here. For Ansible server, currently no
   variables are used.
   #+BEGIN_SRC yaml :tangle roles/ansible/meta/main.yml
   ---
   dependencies:
   - role: common_vars
   #+END_SRC

** Putting it together
   The ansible server is managed with all the above rules. The
   implementation is done in terms of defining suitable scripts for
   each role.  The top level script is =build/code/ansible.yml=

   #+BEGIN_SRC yaml :tangle ansible.yml
   ---
   - name: Configure ansible server
     hosts: ansible-server
     remote_user: ansible
     sudo: yes
     roles:
       - common
       - ansible
   #+END_SRC

* Provisioning Of Ansible Machine
 *How is this provisioning done? Please describe!*

From the base1 machine (10.4.12.21).   

** Creation of Ansible machine
   + How ansible machine is created, IP-address of machine, Domain
     name.
*** Ansible machine configuration
   + Operating System: Centos-6.6
   + Memory: 256MB
   + Disk space: 2GB
*** Ansible machine is created using:
   #+BEGIN_EXAMPLE
    vzctl create <ctid> --ostemplate centos-6-x86_64 --hostname <hostname> --ipadd <ip address>
    vzctl start <ctid>
    vzctl set <ctid> --nameserver inherit --ram 256M --swap 512M --onboot yes --save
   #+END_EXAMPLE 
*** Domain name and IP address of Ansible machine
    - Domain name :: =ansible.staging.virtual-labs.ac.in=
    - IP Address :: =10.4.14.101=
   #+END_EXAMPLE
*** Create user =ansible=
    #+BEGIN_EXAMPLE
    useradd ansible
    #+END_EXAMPLE
*** Generate ssh key and place it in git server
*** Copy VLEAD users public keys to ansible user's authorized keys
*** Provide root privilages to ansible user
    The below line is added to /etc/sudoers.
   #+BEGIN_EXAMPLE
   ansible ALL=(ALL)       NOPASSWD: ALL
   #+END_EXAMPLE
*** Set proxy in /etc/yum.conf
   The following line is added to etc/yum.conf
   #+BEGIN_EXAMPLE
    proxy=http://proxy.iiit.ac.in:8080
   #+END_EXAMPLE
*** Install ansible(version 1.8.4) and git
   #+BEGIN_SRC
   rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
   yum install ansible git -y
   #+END_SRC
*** Disable SSH login for root user
    Change the PermitRootLogin to no in /etc/ssh/sshd_config
    #+BEGIN_SRC
     PermitRootLogin no
    #+END_SRC
** Access to Ansible machine
   - Only VLEAD engineers who have their keys placed in =authorized_keys=
     of ansible machine can *only* access.
** Key based authentication is enabled on the Ansible machine.
   LDAP is disabled. Engineers with their public keys added to
   authorized_keys will only be able to ssh.
** List of VLEAD engineers who have access to Ansible machine
   - . Thirumal Ravula
   - . Saurabh Barjatiya
   - . Anon Ray
   - . Zubair
   - . Jayanth Sagar
   - . Shiv Shankar

* Test Cases
** Test case ID :: ansible-test-case-1
*** Description
    SSH should be allowed only from IIIT network using ansible user.
*** Steps to run the test case
   Test ansible is allowed to ssh ansible user from IIIT network 
   #+BEGIN_SRC 
    ssh ansible@10.4.14.101
   #+END_SRC
*** Expected result
   #+BEGIN_EXAMPLE
    Last login: ---Details of last login---
    [ansible@localhost ~]$ 
   #+END_EXAMPLE
*** Result 
    #+BEGIN_EXAMPLE
    Last login: Mon Mar 16 02:28:31 2015 from ansible.staging.virtual-labs.ac.in
    [ansible@localhost ~]$ 
    #+END_EXAMPLE
 
*** Test Passed :: Yes
** Test case ID :: ansible-test-case-2
*** Description
    Ansible machine must be pingable(ICMP) only from IIIT network.
*** Steps to run the test case
   Test ansible machine allow ping only from IIIT network
   #+BEGIN_SRC 
   ping 10.4.14.101
   #+END_SRC
*** Expected result
    #+BEGIN_EXAMPLE
    PING 10.4.14.101 (10.4.14.101) 56(84) bytes of data.
    64 bytes from 10.4.14.101: icmp_seq=1 ttl=64 time=0.038 ms
    64 bytes from 10.4.14.101: icmp_seq=2 ttl=64 time=0.024 ms
    64 bytes from 10.4.14.101: icmp_seq=3 ttl=64 time=0.024 ms
    64 bytes from 10.4.14.101: icmp_seq=4 ttl=64 time=0.032 ms
    --- 10.4.14.101 ping statistics ---
    4 packets transmitted, 4 received, 0% packet loss, time 3482ms
    rtt min/avg/max/mdev = 0.024/0.029/0.038/0.008 ms
   #+END_EXAMPLE
*** Result 
    #+BEGIN_EXAMPLE
    PING 10.4.14.101 (10.4.14.101) 56(84) bytes of data.
    64 bytes from 10.4.14.101: icmp_seq=1 ttl=64 time=0.038 ms
    64 bytes from 10.4.14.101: icmp_seq=2 ttl=64 time=0.024 ms
    64 bytes from 10.4.14.101: icmp_seq=3 ttl=64 time=0.024 ms
    64 bytes from 10.4.14.101: icmp_seq=4 ttl=64 time=0.032 ms
    --- 10.4.14.101 ping statistics ---
    4 packets transmitted, 4 received, 0% packet loss, time 3482ms
    rtt min/avg/max/mdev = 0.024/0.029/0.038/0.008 ms

    #+END_EXAMPLE
*** Test Passed :: Yes
** Test case ID :: ansible-test-case-3
*** Description
    All the other ports are blocked.
*** Steps to run the test case
    Test ansible machine to block all ports except 22
    -Test port 22 
    #+BEGIN_SRC 
    telnet 10.4.14.101 22
    #+END_SRC
    -Test port 443 
    #+BEGIN_SRC 
    telnet 10.4.14.101 443
    #+END_SRC
    -Test port 80
    #+BEGIN_SRC 
    telnet 10.4.14.101 80
    #+END_SRC
*** Expected result
    -Result for port 22 is expected to be opened
    #+BEGIN_EXAMPLE
    $ telnet 10.4.14.101 22
      Trying 10.4.14.101...
      Connected to 10.4.14.101.
      Escape character is '^]'.
      SSH-2.0-OpenSSH_5.3
    #+END_EXAMPLE
    -Result for port 443 is expected to be closed 
    #+BEGIN_EXAMPLE
    $ telnet 10.4.14.101 443
      Trying 10.4.14.101...
      telnet: Unable to connect to remote host: Connection refused
    #+END_EXAMPLE
    -Result for port 80 is expected to be closed
    #+BEGIN_EXAMPLE
    $ telnet 10.4.14.101 80
      Trying 10.4.14.101...
      telnet: Unable to connect to remote host: Connection refused
    #+END_EXAMPLE

*** Result 
    -Result os testing port 22 
    #+BEGIN_EXAMPLE
    $ telnet 10.4.14.101 22
      Trying 10.4.14.101...
      Connected to 10.4.14.101.
      Escape character is '^]'.
      SSH-2.0-OpenSSH_5.3
    #+END_EXAMPLE
    -Result of testing port 443  
    #+BEGIN_EXAMPLE
    $ telnet 10.4.14.101 443
      Trying 10.4.14.101...
      telnet: Unable to connect to remote host: Connection refused
    #+END_EXAMPLE
    -Result of testing port 80 
    #+BEGIN_EXAMPLE
    $ telnet 10.4.14.101 80
      Trying 10.4.14.101...
      telnet: Unable to connect to remote host: Connection refused
    #+END_EXAMPLE
*** Test Passed :: Yes

