#+TITLE:  Configuration Server
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+options: ^:nil

* Introduction
This document describes the requirements, design and implementation of
the configuration server which is part of the cluster.

This server configures all other servers in the cluster, through
multiple roles.  A role is a specific set of configurations.

* Requirements
The functional and security requirements for Configuration server are:
** Functional Requirements 

  1. <<1>>Configuration server will configure all the nodes in the
     cluster including itself and ensures that the configuration is
     [[consistent][consistent]]
     
  2. <<2>> Configuration server has only one `vlead-jockey' user and
     it has sudo permissions to run all commands.

  3. <<3>> Only authorized VLEAD members can log-in as 'vlead-jockey' user.


** Security Requirements
   1. SSH/Port 22 accessible *ONLY* from IIIT IP range.
   2. Disable root login via ssh.
   3. Limit rate of new connections on port 22.
      

* Design
   
** Snapshot
Configuration server
[[https://docs.google.com/a/vlabs.ac.in/drawings/d/1KRicWtnWvtqb06uNl5hYipeAH5KDQywWy7aOVStVAmo/edit?usp=sharing][Edit Image]]

#+CAPTION:  Ansible Design Diagram
#+LABEL:  fig-ansible-diagram
#+NAME: fig-ansible-diagram

[[./diagrams/ansible.png]]

The design of the firewall rules ensures that this server is
accessible only via port 22. All other ports are disabled. Moreover,
port 22 is accessible only from IIIT IP range.  Only key-based login
to this server is allowed. This server can be reached via ICMP (ping)
requests.

** Design Specifications
|-----------------+-----------------------------------------------------------------|
| Requirement No. | Design                                                          |
|-----------------+-----------------------------------------------------------------|
| [[1]]               | At regular intervals, defined firewall rules are applied        |
|                 | thus ensuring consistency <<consistent>>                        |
|-----------------+-----------------------------------------------------------------|
| [[2]]               | A user 'vlead-jockey' is created and sudo permissions are given |
|                 | to it.                                                          |
|-----------------+-----------------------------------------------------------------|
| [[3]]               | public keys of VLEAD users are copied to the authorized keys    |
|                 | of the Configuration server.                                    |
|-----------------+-----------------------------------------------------------------|

* Implementation
** Structure of the scripts
The implementation of this system is in terms of a collection of Ansible scripts that
configures the machine. Scripts are organized as follows:

#+BEGIN_EXAMPLE

|-- ansible.yml
|-- roles
|   |-- ansible
|   |   |-- handlers
|   |   |   `-- main.yml
|   |   |-- meta
|   |   |   `-- main.yml
|   |   |-- tasks
|   |   |   |-- main.yml
|   |   `-- templates
|   |       `-- iptables
|   |-- common
|   |   ...
#+END_EXAMPLE

** Hardening, OS Updates etc.
   Common role takes care of functional requirement [[1]]. More
   information is [[./common.org][here]].

** Building the firewall rules
   
*** The default rules for filter table
    Default policy for input, forward and output is set as ACCEPT. If
    packet does not match any rule then this default action is applied
    to the packet.  Packet counters are set to [0:0].  First counter
    represents the number of packets that matched the rule for the
    chain, and second counter represents the total size of the packets
    that matched the rule.
#+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables :eval no
 *filter
 :INPUT ACCEPT [0:0]
 :FORWARD ACCEPT [0:0]
 :OUTPUT ACCEPT [0:0]
#+END_SRC

    
*** Rule for INPUT loopback packets
   
    Allow internal communication between services running within the
    ansible, over loopback interface. Input interface is also
    specified to avoid any security breach. The configuration server
    needs to accept all connections from loop back.

#+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables
 -A INPUT -i lo -j ACCEPT
#+END_SRC


*** Rule for related and established connections from other machines
    Allow ansible to continue already related and established
    connections. If a previous connection was passed and established
    through the firewall, it is allowed to continue.


#+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables
 -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
#+END_SRC

*** Rule for incoming SSH connection

    The base1-cluster is on IIIT-H's local network
    The configuration server is accessible 
    via ssh (port 22) *only* from the IIIT-H local network. 
    (A variable is defined in =common_vars=. Currently it is 10.0.0.0/8

#+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables
 -A INPUT -p tcp -m tcp -s {{vlead_ip_range}} --dport 22 -j ACCEPT
#+END_SRC

*** ICMP Rule
    The server accepts ping requests(ICMP) from anywhere

#+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables
 -A INPUT -p icmp -m icmp --icmp-type echo-request -j ACCEPT
#+END_SRC
    
*** All other packets should be rejected
    The incoming and outgoing packets on all other ports are rejected.

#+BEGIN_SRC yaml :tangle roles/ansible/templates/iptables :eval no
 -A INPUT -j REJECT
 -A FORWARD -j REJECT
  COMMIT
#+END_SRC

** Apply firewall rules to Configuration server
   Firewall rules are applied by following steps:
    1) Copy the iptables template to the configuration server.
    2) Restart iptables service to apply the configuration.

#+BEGIN_SRC yaml :tangle roles/ansible/tasks/main.yml :eval no
---
- name: Copy iptables configuration file for configuration server
  template: src=iptables dest=/etc/sysconfig/iptables mode=600 owner=root group=root
  notify: restart iptables
#+END_SRC

** Disable root login via ssh
   Root login is disabled for configuration server. This is achieved
   by modifying the =sshd_config= file .  We assume =PermitRootLogin=
   parameter is already set to some value.

#+BEGIN_SRC yaml :tangle roles/ansible/tasks/main.yml :eval no
- name: Disable root login via ssh
  lineinfile: dest=/etc/ssh/sshd_config regexp="^PermitRootLogin .*" state=present line="PermitRootLogin no"
#+END_SRC

** Dependencies
   All the variables go here. For configuration server, currently no
   variables are used.
#+BEGIN_SRC yaml :tangle roles/ansible/meta/main.yml
---
  dependencies:
  - role: common_vars
#+END_SRC

** Putting it together
   The configuration server is managed with all the above rules. The
   implementation is done in terms of defining suitable scripts for
   each role.  The top level script is =build/code/ansible.yml=

#+BEGIN_SRC yaml :tangle site.yml
---
  - name: Setup configuration server
    hosts: configuration-server
    remote_user: vlead-jockey
    sudo: yes
    roles:
      - common
      - ansible
#+END_SRC

* Provisioning 
 
Provisioning is done by creating a bare new machine on base1.  
From the base1 machine (10.4.12.21) execute following:   

** Creation of Configuration server
   + How configuration server is created, its IP-address, and Domain
     name.
*** Machine configuration
   + Operating System: Centos-6.6
   + Memory: 256MB
   + Disk space: 2GB
*** Configuration server is created using:
   #+BEGIN_EXAMPLE
    vzctl create <ctid> --ostemplate centos-6-x86_64 --hostname <hostname> --ipadd <ip address>
    vzctl start <ctid>
    vzctl set <ctid> --nameserver inherit --ram 256M --swap 512M --onboot yes --save
   #+END_EXAMPLE 
*** Domain name and IP address of server s
    #+BEGIN_EXAMPLE
    - Domain name :: ansible.staging.virtual-labs.ac.in
    - IP Address :: 10.4.14.101
   #+END_EXAMPLE
*** Stop and uninstall httpd if it is present in template used to create configuration server
    #+BEGIN_EXAMPLE
    service httpd stop
    yum remove httpd
    #+END_EXAMPLE
*** Create user =vlead-jockey=
    #+BEGIN_EXAMPLE
    useradd vlead-jockey
    #+END_EXAMPLE
*** Copy VLEAD users public keys to vlead-jockey user's authorized keys
    #+BEGIN_SRC 
    mkdir /home/vlead-jockey/.ssh
    #+END_SRC
   Copy all the public keys into =/home/vlead-jockey/.ssh/authorized_keys= 
*** Generate ssh key for vlead-jockey user and copy it to it's own authorized_keys(to allow ssh from localhost)
    #+BEGIN_SRC 
    ssh-keygen -t rsa
    cd /home/vlead-jockey/.ssh/
    cat id_rsa.pub >> authorized_keys
    #+END_SRC
*** Provide root privilages to vlead-jockey user
    The below line is added to /etc/sudoers.
  #+BEGIN_EXAMPLE
   vlead-jockey ALL=(ALL)       NOPASSWD: ALL
  #+END_EXAMPLE
*** Set proxy in /etc/yum.conf
   The following line is added to etc/yum.conf
  #+BEGIN_EXAMPLE
    proxy=http://proxy.iiit.ac.in:8080
  #+END_EXAMPLE
*** Install ansible(version 1.8.4) and git
  #+BEGIN_SRC
   rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
   yum install ansible git -y
  #+END_SRC
*** Disable SSH login for root user
    Change the =PermitRootLogin= to no in =/etc/ssh/sshd_config=
    #+BEGIN_SRC
     PermitRootLogin no
    #+END_SRC
** Access to Configuration Server
   - Only VLEAD engineers who have their keys placed in =authorized_keys=
     of server can *only* access.
** Key based authentication is enabled on the Configuration Server
   LDAP is disabled. Engineers with their public keys added to
   authorized_keys will only be able to ssh.
** List of VLEAD engineers who have access to Server
   - Thirumal Ravula
   - Saurabh Barjatiya
   - Anon Ray
   - Zubair
   - Jayanth Sagar
   - Shiv Shankar
   - Sripathi
   - Soumya
   - Yogesh
   - Ambika
   - Madhavi
   - Khushpreet
   - Prakash
   - Sanchita

* Test Cases
** Test case ID :: ansible-test-case-1
*** Description
    SSH is allowed only from IIIT network.
*** Steps to run the test case
    Test ssh login is allowed for =vlead-jockey= user from IIIT network. 
   #+BEGIN_SRC 
    ssh vlead-jockey@10.4.14.101
   #+END_SRC
*** Expected result
   #+BEGIN_EXAMPLE
    Last login: ---Details of last login---
    [vlead-jockey@localhost ~]$ 
   #+END_EXAMPLE
*** Result 
    #+BEGIN_EXAMPLE
    Last login: Mon Mar 16 02:28:31 2015 from ansible.staging.virtual-labs.ac.in
    [vlead-jockey@localhost ~]$ 
    #+END_EXAMPLE
 
*** Test Passed :: Yes
** Test case ID :: ansible-test-case-2
*** Description
    Checking ports
*** Steps to run the test case
    Test if all ports of configuration server are blocked except for
    port 22
    #+BEGIN_SRC 
    $ nmap -v 10.4.14.101
    #+END_SRC
*** Expected result
   
    #+BEGIN_EXAMPLE
     Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-16 16:34 IST
     Initiating Ping Scan at 16:34
     Scanning 10.4.14.101 [2 ports]
     Completed Ping Scan at 16:34, 0.02s elapsed (1 total hosts)
     Initiating Parallel DNS resolution of 1 host. at 16:34
     Completed Parallel DNS resolution of 1 host. at 16:34, 0.01s elapsed
     Initiating Connect Scan at 16:34
     Scanning 10.4.14.101 [1000 ports]
     Discovered open port 22/tcp on 10.4.14.101
     Completed Connect Scan at 16:34, 1.86s elapsed (1000 total ports)
     Nmap scan report for 10.4.14.101
     Host is up (0.033s latency).
     Not shown: 999 closed ports
     PORT   STATE SERVICE
     22/tcp open  ssh

     Read data files from: /usr/bin/../share/nmap
     Nmap done: 1 IP address (1 host up) scanned in 1.92 seconds
    #+END_EXAMPLE

*** Result 
    -Result on running test
     #+BEGIN_EXAMPLE
     Starting Nmap 6.40 ( http://nmap.org ) at 2015-03-16 16:34 IST
     Initiating Ping Scan at 16:34
     Scanning 10.4.14.101 [2 ports]
     Completed Ping Scan at 16:34, 0.02s elapsed (1 total hosts)
     Initiating Parallel DNS resolution of 1 host. at 16:34
     Completed Parallel DNS resolution of 1 host. at 16:34, 0.01s elapsed
     Initiating Connect Scan at 16:34
     Scanning 10.4.14.101 [1000 ports]
     Discovered open port 22/tcp on 10.4.14.101
     Completed Connect Scan at 16:34, 1.86s elapsed (1000 total ports)
     Nmap scan report for 10.4.14.101
     Host is up (0.033s latency).
     Not shown: 999 closed ports
     PORT   STATE SERVICE
     22/tcp open  ssh

     Read data files from: /usr/bin/../share/nmap
     Nmap done: 1 IP address (1 host up) scanned in 1.92 seconds
    #+END_EXAMPLE
*** Test Passed :: Yes

